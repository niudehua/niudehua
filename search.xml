<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python基础入门：从变量到异常处理</title>
      <link href="2020/09/13/python-ji-chu-ru-men-cong-bian-liang-dao-yi-chang-chu-li/"/>
      <url>2020/09/13/python-ji-chu-ru-men-cong-bian-liang-dao-yi-chang-chu-li/</url>
      
        <content type="html"><![CDATA[<hr><p>[TOC]</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Python 是一种通用编程语言，其在科学计算和机器学习领域具有广泛的应用。如果我们打算利用 Python 来执行机器学习，那么对 Python 有一些基本的了解就是至关重要的。本 Python 入门系列体验就是为这样的初学者精心准备的。</p><p>本实验包括以下内容：</p><h2 id="变量、运算符与数据类型"><a href="#变量、运算符与数据类型" class="headerlink" title="变量、运算符与数据类型"></a>变量、运算符与数据类型</h2><h3 id="1-注释"><a href="#1-注释" class="headerlink" title="1.注释"></a>1.注释</h3><ul><li>在Python中，# 表示单行注释，作用于整行</li></ul><p>【例子】单行注释</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 单行注释</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"单行注释"</span><span class="token punctuation">)</span></code></pre><ul><li>‘’’ ‘’’ 或者 “”” “”” 表示区间注释，在三引号之间的所有内容被注释</li></ul><p>【例子】 多行注释</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''单引号多行注释'''</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"多行注释"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""双引号多行注释"""</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"双引号多行注释"</span><span class="token punctuation">)</span></code></pre><h3 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2.运算符"></a>2.运算符</h3><p><strong>算术运算符</strong></p><table><thead><tr><th align="center">操作符</th><th align="center">名称</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center"><code>+</code></td><td align="center">加</td><td align="center"><code>1 + 1</code></td></tr><tr><td align="center"><code>-</code></td><td align="center">减</td><td align="center"><code>2 - 1</code></td></tr><tr><td align="center"><code>*</code></td><td align="center">乘</td><td align="center"><code>3 * 4</code></td></tr><tr><td align="center"><code>/</code></td><td align="center">除</td><td align="center"><code>3 / 4</code></td></tr><tr><td align="center"><code>//</code></td><td align="center">整除（地板除）</td><td align="center"><code>3 // 4</code></td></tr><tr><td align="center"><code>%</code></td><td align="center">取余</td><td align="center"><code>3 % 4</code></td></tr><tr><td align="center"><code>**</code></td><td align="center">幂</td><td align="center"><code>2 ** 3</code></td></tr></tbody></table><p>【例子】</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 12</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0.75</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">//</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 3</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 8</span></code></pre><p><strong>比较运算符</strong></p><table><thead><tr><th align="center">操作符</th><th align="center">名称</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center"><code>&gt;</code></td><td align="center">大于</td><td align="center"><code>2 &gt; 1</code></td></tr><tr><td align="center"><code>&gt;=</code></td><td align="center">大于等于</td><td align="center"><code>2 &gt;= 4</code></td></tr><tr><td align="center"><code>&lt;</code></td><td align="center">小于</td><td align="center"><code>1 &lt; 2</code></td></tr><tr><td align="center"><code>&lt;=</code></td><td align="center">小于等于</td><td align="center"><code>5 &lt;= 2</code></td></tr><tr><td align="center"><code>==</code></td><td align="center">等于</td><td align="center"><code>3 == 4</code></td></tr><tr><td align="center"><code>!=</code></td><td align="center">不等于</td><td align="center"><code>3 != 5</code></td></tr></tbody></table><p>【例子】</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">!=</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span></code></pre><p><strong>逻辑运算符</strong></p><table><thead><tr><th align="center">操作符</th><th align="center">名称</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center"><code>and</code></td><td align="center">与</td><td align="center"><code>(3 &gt; 2) and (3 &lt; 5)</code></td></tr><tr><td align="center"><code>or</code></td><td align="center">或</td><td align="center"><code>(1 &gt; 3) or (9 &lt; 2)</code></td></tr><tr><td align="center"><code>not</code></td><td align="center">非</td><td align="center"><code>not (2 &gt; 1)</code></td></tr></tbody></table><p>【例子】</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">&lt;</span> <span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">not</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># False</span></code></pre><p><strong>位运算符</strong></p><table><thead><tr><th align="center">操作符</th><th align="center">名称</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center"><code>~</code></td><td align="center">按位取反</td><td align="center"><code>~4</code></td></tr><tr><td align="center"><code>&amp;</code></td><td align="center">按位与</td><td align="center"><code>4 &amp; 5</code></td></tr><tr><td align="center">`</td><td align="center">`</td><td align="center">按位或</td></tr><tr><td align="center"><code>^</code></td><td align="center">按位异或</td><td align="center"><code>4 ^ 5</code></td></tr><tr><td align="center"><code>&lt;&lt;</code></td><td align="center">左移</td><td align="center"><code>4 &lt;&lt; 2</code></td></tr><tr><td align="center"><code>&gt;&gt;</code></td><td align="center">右移</td><td align="center"><code>4 &gt;&gt; 2</code></td></tr></tbody></table><p>【例子】</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>bin<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 0b100</span><span class="token keyword">print</span><span class="token punctuation">(</span>bin<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 0b101</span><span class="token keyword">print</span><span class="token punctuation">(</span>bin<span class="token punctuation">(</span><span class="token operator">~</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">~</span><span class="token number">4</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># -0b101 -5</span><span class="token keyword">print</span><span class="token punctuation">(</span>bin<span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">&amp;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token operator">&amp;</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 0b100 4</span><span class="token keyword">print</span><span class="token punctuation">(</span>bin<span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">|</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 0b101 5</span><span class="token keyword">print</span><span class="token punctuation">(</span>bin<span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">^</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token operator">^</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 0b1 1</span><span class="token keyword">print</span><span class="token punctuation">(</span>bin<span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0b10000 16</span><span class="token keyword">print</span><span class="token punctuation">(</span>bin<span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0b1 1</span></code></pre><p><strong>三元运算符</strong></p><p>【例子】</p><pre class=" language-python"><code class="language-python">x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token keyword">if</span> x <span class="token operator">&lt;</span> y<span class="token punctuation">:</span>    small <span class="token operator">=</span> x<span class="token keyword">else</span><span class="token punctuation">:</span>    small <span class="token operator">=</span> y<span class="token keyword">print</span><span class="token punctuation">(</span>small<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 4</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span></code></pre><p>有了三元操作符的条件表达式，你可以使用一条语句来完成以上的条件判断和赋值操作。<br>【例子】</p><pre class=" language-python"><code class="language-python">x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span>small <span class="token operator">=</span> x <span class="token keyword">if</span> x <span class="token operator">&lt;</span> y <span class="token keyword">else</span> y<span class="token keyword">print</span><span class="token punctuation">(</span>small<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 4</span></code></pre><p><strong>其他运算符</strong></p><table><thead><tr><th align="center">操作符</th><th align="center">名称</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center"><code>in</code></td><td align="center">存在</td><td align="center"><code>&#39;A&#39; in [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]</code></td></tr><tr><td align="center"><code>not in</code></td><td align="center">不存在</td><td align="center"><code>&#39;h&#39; not in [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]</code></td></tr><tr><td align="center"><code>is</code></td><td align="center">是</td><td align="center"><code>&quot;hello&quot; is &quot;hello&quot;</code></td></tr><tr><td align="center"><code>not is</code></td><td align="center">不是</td><td align="center"><code>&quot;hello&quot; is not &quot;hello&quot;</code></td></tr></tbody></table><p>【例子】</p><pre class=" language-python"><code class="language-python">letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token string">'A'</span> <span class="token keyword">in</span> letters<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">+</span> <span class="token string">' exists'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token string">'h'</span> <span class="token operator">not</span> <span class="token keyword">in</span> letters<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'h'</span> <span class="token operator">+</span> <span class="token string">' not exists'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># A exists</span><span class="token comment" spellcheck="true"># h not exists</span></code></pre><p>【例子】比较的两个变量均指向不可变类型。</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token string">"hello"</span>b <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">,</span> a <span class="token operator">==</span> b<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># True True</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> <span class="token operator">not</span> b<span class="token punctuation">,</span> a <span class="token operator">!=</span> b<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># False False</span></code></pre><p>【例子】比较的两个变量均指向可变类型。</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">,</span> a <span class="token operator">==</span> b<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># False True</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> <span class="token operator">not</span> b<span class="token punctuation">,</span> a <span class="token operator">!=</span> b<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># True False</span></code></pre><p>注意：</p><ul><li>is, is not 对比的是两个变量的内存地址</li><li>==, != 对比的是两个变量的值</li><li>比较的两个变量，指向的都是地址不可变的类型（str等），那么is，is not 和 ==，！= 是完全等价的。</li><li>对比的两个变量，指向的是地址可变的类型（list，dict，tuple等），则两者是有区别的。</li></ul><p><strong>运算符的优先级</strong></p><ul><li>一元运算符优于二元运算符。例如<code>3 ** -2</code>等价于<code>3 ** (-2)</code>。</li><li>先算术运算，后移位运算，最后位运算。例如 <code>1 &lt;&lt; 3 + 2 &amp; 7</code>等价于 <code>(1 &lt;&lt; (3 + 2)) &amp; 7</code>。</li><li>逻辑运算最后结合。例如<code>3 &lt; 4 and 4 &lt; 5</code>等价于<code>(3 &lt; 4) and (4 &lt; 5)</code>。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># -9</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">**</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># 0.1111111111111111</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&amp;</span> <span class="token number">7</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># -12.5</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token operator">and</span> <span class="token number">4</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># True</span></code></pre><h3 id="3-变量和赋值"><a href="#3-变量和赋值" class="headerlink" title="3. 变量和赋值"></a>3. 变量和赋值</h3><ul><li>在使用变量之前，需要对其先赋值。</li><li>变量名可以包括字母、数字、下划线、但变量名不能以数字开头。</li><li>Python 变量名是大小写敏感的，foo != Foo。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">teacher <span class="token operator">=</span> <span class="token string">"老马的程序人生"</span><span class="token keyword">print</span><span class="token punctuation">(</span>teacher<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 老马的程序人生</span>first <span class="token operator">=</span> <span class="token number">2</span>second <span class="token operator">=</span> <span class="token number">3</span>third <span class="token operator">=</span> first <span class="token operator">+</span> second<span class="token keyword">print</span><span class="token punctuation">(</span>third<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 5</span>myTeacher <span class="token operator">=</span> <span class="token string">"老马的程序人生"</span>yourTeacher <span class="token operator">=</span> <span class="token string">"小马的程序人生"</span>ourTeacher <span class="token operator">=</span> myTeacher <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> yourTeacher<span class="token keyword">print</span><span class="token punctuation">(</span>ourTeacher<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 老马的程序人生,小马的程序人生</span></code></pre><h3 id="4-数据类型与转换"><a href="#4-数据类型与转换" class="headerlink" title="4. 数据类型与转换"></a>4. 数据类型与转换</h3><table><thead><tr><th align="center">类型</th><th align="center">名称</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">int</td><td align="center">整型 <code>&lt;class &#39;int&#39;&gt;</code></td><td align="center"><code>-876, 10</code></td></tr><tr><td align="center">float</td><td align="center">浮点型<code>&lt;class &#39;float&#39;&gt;</code></td><td align="center"><code>3.149, 11.11</code></td></tr><tr><td align="center">bool</td><td align="center">布尔型<code>&lt;class &#39;bool&#39;&gt;</code></td><td align="center"><code>True, False</code></td></tr></tbody></table><p><strong>整型</strong></p><p>【例子】通过 <code>print()</code> 可看出 <code>a</code> 的值，以及类 (class) 是<code>int</code>。</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1031</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1031 &lt;class 'int'></span></code></pre><p>Python 里面万物皆对象（object），整型也不例外，只要是对象，就有相应的属性 （attributes） 和方法（methods）。</p><pre class=" language-python"><code class="language-python">b <span class="token operator">=</span> dir<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__',</span><span class="token comment" spellcheck="true"># '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__',</span><span class="token comment" spellcheck="true"># '__float__', '__floor__', '__floordiv__', '__format__', '__ge__',</span><span class="token comment" spellcheck="true"># '__getattribute__', '__getnewargs__', '__gt__', '__hash__',</span><span class="token comment" spellcheck="true"># '__index__', '__init__', '__init_subclass__', '__int__', '__invert__',</span><span class="token comment" spellcheck="true"># '__le__', '__lshift__', '__lt__', '__mod__', '__mul__', '__ne__',</span><span class="token comment" spellcheck="true"># '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__',</span><span class="token comment" spellcheck="true"># '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__',</span><span class="token comment" spellcheck="true"># '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__',</span><span class="token comment" spellcheck="true"># '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__',</span><span class="token comment" spellcheck="true"># '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__',</span><span class="token comment" spellcheck="true"># '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__',</span><span class="token comment" spellcheck="true"># 'bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag',</span><span class="token comment" spellcheck="true"># 'numerator', 'real', 'to_bytes']</span></code></pre><p>对它们有个大概印象就可以了，具体怎么用，需要哪些参数 （argument），还需要查文档。看个<code>bit_length()</code>的例子。</p><p>【例子】找到一个整数的二进制表示，再返回其长度。</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1031</span><span class="token keyword">print</span><span class="token punctuation">(</span>bin<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># 0b10000000111</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>bit_length<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 11</span></code></pre><p><strong>浮点型</strong></p><p>【例子】</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> type<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1 &lt;class 'int'></span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> type<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1.0 &lt;class 'float'></span>a <span class="token operator">=</span> <span class="token number">0.00000023</span>b <span class="token operator">=</span> <span class="token number">2.3e-7</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2.3e-07</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2.3e-07</span></code></pre><p>有时候我们想保留浮点型的小数点后 <code>n</code> 位。可以用 <code>decimal</code> 包里的 <code>Decimal</code> 对象和 <code>getcontext()</code> 方法来实现。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> decimal<span class="token keyword">from</span> decimal <span class="token keyword">import</span> Decimal</code></pre><p>Python 里面有很多用途广泛的包 (package)，用什么你就引进 (import) 什么。包也是对象，也可以用上面提到的<code>dir(decimal)</code> 来看其属性和方法。</p><p>【例子】<code>getcontext()</code> 显示了 <code>Decimal</code> 对象的默认精度值是 28 位 (<code>prec=28</code>)。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> decimal<span class="token keyword">from</span> decimal <span class="token keyword">import</span> Decimaldecimal<span class="token punctuation">.</span>getcontext<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>prec <span class="token operator">=</span> <span class="token number">4</span>b <span class="token operator">=</span> Decimal<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> Decimal<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>decimal<span class="token punctuation">.</span>getcontext<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>prec <span class="token operator">=</span> <span class="token number">4</span>c <span class="token operator">=</span> Decimal<span class="token punctuation">(</span><span class="token number">1012</span><span class="token punctuation">)</span> <span class="token operator">/</span> Decimal<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span></code></pre><p><strong>布尔型</strong></p><p>布尔 (boolean) 型变量只能取两个值，<code>True</code> 和 <code>False</code>。当把布尔型变量用在数字运算中，用 <code>1</code> 和 <code>0</code> 代表 <code>True</code> 和 <code>False</code>。</p><p>【例子】</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">True</span> <span class="token operator">+</span> <span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">True</span> <span class="token operator">+</span> <span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">True</span> <span class="token operator">*</span> <span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span></code></pre><p>除了直接给变量赋值 <code>True</code> 和 <code>False</code>，还可以用 <code>bool(X)</code> 来创建变量，其中 <code>X</code> 可以是</p><ul><li>基本类型：整型、浮点型、布尔型</li><li>容器类型：字符串、元组、列表、字典和集合</li></ul><p>【例子】<code>bool</code> 作用在基本类型变量：<code>X</code> 只要不是整型 <code>0</code>、浮点型 <code>0.0</code>，<code>bool(X)</code> 就是 <code>True</code>，其余就是 <code>False</code>。</p><p>确定<code>bool(X)</code> 的值是 <code>True</code> 还是 <code>False</code>，就看 <code>X</code> 是不是空，空的话就是 <code>False</code>，不空的话就是 <code>True</code>。</p><ul><li>对于数值变量，<code>0</code>, <code>0.0</code> 都可认为是空的。</li><li>对于容器变量，里面没元素就是空的。</li></ul><p><strong>获取类型信息</strong></p><ul><li>获取类型信息 <code>type(object)</code></li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span><span class="token number">5.2</span><span class="token punctuation">,</span> float<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> bool<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span><span class="token string">'5.2'</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span></code></pre><p>注：</p><ul><li><code>type()</code> 不会认为子类是一种父类类型，不考虑继承关系。</li><li><code>isinstance()</code> 会认为子类是一种父类类型，考虑继承关系。</li></ul><p>如果要判断两个类型是否相同推荐使用 <code>isinstance()</code>。</p><p><strong>类型转换</strong></p><ul><li>转换为整型 <code>int(x, base=10)</code></li><li>转换为字符串 <code>str(object=&#39;&#39;)</code></li><li>转换为浮点型 <code>float(x)</code></li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span><span class="token string">'520'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 520</span><span class="token keyword">print</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span><span class="token number">520.52</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 520</span><span class="token keyword">print</span><span class="token punctuation">(</span>float<span class="token punctuation">(</span><span class="token string">'520.52'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 520.52</span><span class="token keyword">print</span><span class="token punctuation">(</span>float<span class="token punctuation">(</span><span class="token number">520</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 520.0</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 20</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">10.1</span> <span class="token operator">+</span> <span class="token number">5.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 15.3</span></code></pre><h3 id="5-print-函数"><a href="#5-print-函数" class="headerlink" title="5. print() 函数"></a>5. print() 函数</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>objects<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">,</span> file<span class="token operator">=</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">,</span> flush<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><ul><li>将对象以字符串表示的方式格式化输出到流文件对象file里。其中所有非关键字参数都按<code>str()</code>方式进行转换为字符串输出；</li><li>关键字参数<code>sep</code>是实现分隔符，比如多个参数输出时想要输出中间的分隔字符；</li><li>关键字参数<code>end</code>是输出结束时的字符，默认是换行符<code>\n</code>；</li><li>关键字参数<code>file</code>是定义流输出的文件，可以是标准的系统输出<code>sys.stdout</code>，也可以重定义为别的文件；</li><li>关键字参数<code>flush</code>是立即把内容输出到流文件，不作缓存。</li></ul><p>【例子】没有参数时，每次输出后都会换行。</p><pre class=" language-python"><code class="language-python">shoplist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'mango'</span><span class="token punctuation">,</span> <span class="token string">'carrot'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This is printed without 'end'and 'sep'."</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> shoplist<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># This is printed without 'end'and 'sep'.</span><span class="token comment" spellcheck="true"># apple</span><span class="token comment" spellcheck="true"># mango</span><span class="token comment" spellcheck="true"># carrot</span><span class="token comment" spellcheck="true"># banana</span></code></pre><p>【例子】每次输出结束都用<code>end</code>设置的参数<code>&amp;</code>结尾，并没有默认换行。</p><pre class=" language-python"><code class="language-python">shoplist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'mango'</span><span class="token punctuation">,</span> <span class="token string">'carrot'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This is printed with 'end='&amp;''."</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> shoplist<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># This is printed with 'end='&amp;''.</span><span class="token comment" spellcheck="true"># apple&amp;mango&amp;carrot&amp;banana&amp;hello world</span></code></pre><p>【例子】<code>item</code>值与<code>&#39;another string&#39;</code>两个值之间用<code>sep</code>设置的参数<code>&amp;</code>分割。由于<code>end</code>参数没有设置，因此默认是输出解释后换行，即<code>end</code>参数的默认值为<code>\n</code>。</p><pre class=" language-python"><code class="language-python">shoplist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'mango'</span><span class="token punctuation">,</span> <span class="token string">'carrot'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This is printed with 'sep='&amp;''."</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> shoplist<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token string">'another string'</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># This is printed with 'sep='&amp;''.</span><span class="token comment" spellcheck="true"># apple&amp;another string</span><span class="token comment" spellcheck="true"># mango&amp;another string</span><span class="token comment" spellcheck="true"># carrot&amp;another string</span><span class="token comment" spellcheck="true"># banana&amp;another string</span></code></pre><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><h3 id="1-原码、反码和补码"><a href="#1-原码、反码和补码" class="headerlink" title="1. 原码、反码和补码"></a>1. 原码、反码和补码</h3><p>二进制有三种不同的表示形式：原码、反码和补码，<u>计算机内部使用补码来表示</u>。</p><p><strong>原码</strong>：就是其二进制表示（注意，有一位符号位,第一是符号位，0表示整数，1表示负数）。</p><pre class=" language-python"><code class="language-python"><span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">11</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">3</span><span class="token number">10</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">11</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">3</span></code></pre><p><strong>反码</strong>：正数的反码就是原码，负数的反码是符号位不变，其余位取反（对应正数按位取反）。</p><pre class=" language-python"><code class="language-python"><span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">11</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">3</span><span class="token number">11</span> <span class="token number">11</span> <span class="token number">11</span> <span class="token number">00</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">3</span></code></pre><p><strong>补码</strong>：正数的补码就是原码，负数的补码是反码+1。</p><pre class=" language-python"><code class="language-python"><span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">11</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">3</span><span class="token number">11</span> <span class="token number">11</span> <span class="token number">11</span> <span class="token number">01</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">3</span></code></pre><p><strong>符号位</strong>：最高位为符号位，0表示正数，1表示负数。在位运算中符号位也参与运算。</p><h3 id="2-按位运算"><a href="#2-按位运算" class="headerlink" title="2. 按位运算"></a>2. 按位运算</h3><ul><li>按位非操作 ~</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">~</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">~</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">1</span></code></pre><p><code>~</code> 把<code>num</code>的补码中的 0 和 1 全部取反（0 变为 1，1 变为 0）有符号整数的符号位在 <code>~</code> 运算中同样会取反。</p><pre class=" language-python"><code class="language-python"><span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">01</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">5</span><span class="token operator">~</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">11</span> <span class="token number">11</span> <span class="token number">10</span> <span class="token number">10</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">6</span><span class="token number">11</span> <span class="token number">11</span> <span class="token number">10</span> <span class="token number">11</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">5</span><span class="token operator">~</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">00</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">4</span></code></pre><ul><li>按位与操作 &amp;  </li></ul><pre class=" language-python"><code class="language-python"><span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token number">0</span> <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token number">0</span> <span class="token operator">&amp;</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span></code></pre><p>只有两个对应位都为 1 时才为 1</p><pre class=" language-python"><code class="language-python"><span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">01</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">5</span><span class="token operator">&amp;</span><span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">10</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">6</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">00</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">4</span></code></pre><ul><li>按位或操作 |</li></ul><pre class=" language-python"><code class="language-python"><span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token number">0</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span></code></pre><p>只要两个对应位中有一个 1 时就为 1</p><pre class=" language-python"><code class="language-python"><span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">01</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">5</span><span class="token operator">|</span><span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">10</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">6</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">11</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">7</span></code></pre><ul><li>按位异或操作 ^</li></ul><pre class=" language-python"><code class="language-python"><span class="token number">1</span> <span class="token operator">^</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token number">1</span> <span class="token operator">^</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token number">0</span> <span class="token operator">^</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token number">0</span> <span class="token operator">^</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span></code></pre><p>只有两个对应位不同时才为 1</p><pre class=" language-python"><code class="language-python"><span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">01</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">5</span><span class="token operator">^</span><span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">10</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">6</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">11</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">3</span></code></pre><p>异或操作的性质：满足交换律和结合律</p><pre class=" language-python"><code class="language-python">A<span class="token punctuation">:</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">11</span> <span class="token number">00</span>B<span class="token punctuation">:</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">11</span>A<span class="token operator">^</span>B<span class="token punctuation">:</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">10</span> <span class="token number">11</span>B<span class="token operator">^</span>A<span class="token punctuation">:</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">10</span> <span class="token number">11</span>A<span class="token operator">^</span>A<span class="token punctuation">:</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>A<span class="token operator">^</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">11</span> <span class="token number">00</span>A<span class="token operator">^</span>B<span class="token operator">^</span>A<span class="token punctuation">:</span> <span class="token operator">=</span> A<span class="token operator">^</span>A<span class="token operator">^</span>B <span class="token operator">=</span> B <span class="token operator">=</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">11</span></code></pre><ul><li>按位左移操作 &lt;&lt;</li></ul><p><code>num &lt;&lt; i</code> 将<code>num</code>的二进制表示向左移动<code>i</code>位所得的值。</p><pre class=" language-python"><code class="language-python"><span class="token number">00</span> <span class="token number">00</span> <span class="token number">10</span> <span class="token number">11</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">11</span><span class="token number">11</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">01</span> <span class="token number">10</span> <span class="token number">00</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">88</span> </code></pre><ul><li>按位右移操作 &gt;&gt;</li></ul><p><code>num &gt;&gt; i</code> 将<code>num</code>的二进制表示向右移动<code>i</code>位所得的值。</p><pre class=" language-python"><code class="language-python"><span class="token number">00</span> <span class="token number">00</span> <span class="token number">10</span> <span class="token number">11</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">11</span><span class="token number">11</span> <span class="token operator">>></span> <span class="token number">2</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">10</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">2</span> </code></pre><h3 id="3-利用位运算实现快速计算"><a href="#3-利用位运算实现快速计算" class="headerlink" title="3. 利用位运算实现快速计算"></a>3. 利用位运算实现快速计算</h3><p>通过 <code>&lt;&lt;</code>，<code>&gt;&gt;</code> 快速计算2的倍数问题。</p><pre class=" language-python"><code class="language-python">n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">-</span><span class="token operator">></span> 计算 n<span class="token operator">*</span><span class="token number">2</span>n <span class="token operator">>></span> <span class="token number">1</span> <span class="token operator">-</span><span class="token operator">></span> 计算 n<span class="token operator">/</span><span class="token number">2</span>，负奇数的运算不可用n <span class="token operator">&lt;&lt;</span> m <span class="token operator">-</span><span class="token operator">></span> 计算 n<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">^</span>m<span class="token punctuation">)</span>，即乘以 <span class="token number">2</span> 的 m 次方n <span class="token operator">>></span> m <span class="token operator">-</span><span class="token operator">></span> 计算 n<span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">^</span>m<span class="token punctuation">)</span>，即除以 <span class="token number">2</span> 的 m 次方<span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">-</span><span class="token operator">></span> <span class="token number">2</span><span class="token operator">^</span>n</code></pre><p>通过 <code>^</code> 快速交换两个整数。（异或交换律）</p><pre class=" language-python"><code class="language-python">a <span class="token operator">^</span><span class="token operator">=</span> bb <span class="token operator">^</span><span class="token operator">=</span> aa <span class="token operator">^</span><span class="token operator">=</span> b</code></pre><p>通过 <code>a &amp; (-a)</code> 快速获取<code>a</code>的最后为 1 位置的整数。</p><pre class=" language-python"><code class="language-python"><span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">01</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">5</span><span class="token operator">&amp;</span><span class="token number">11</span> <span class="token number">11</span> <span class="token number">10</span> <span class="token number">11</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span><span class="token number">00</span> <span class="token number">00</span> <span class="token number">11</span> <span class="token number">10</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">14</span><span class="token operator">&amp;</span><span class="token number">11</span> <span class="token number">11</span> <span class="token number">00</span> <span class="token number">10</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">14</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">10</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">2</span></code></pre><h3 id="4-利用位运算实现整数集合"><a href="#4-利用位运算实现整数集合" class="headerlink" title="4. 利用位运算实现整数集合"></a>4. 利用位运算实现整数集合</h3><p>一个数的二进制表示可以看作是一个集合（0 表示不在集合中，1 表示在集合中）。</p><p>比如集合 <code>&#123;1, 3, 4, 8&#125;</code>，可以表示成 <code>01 00 01 10 10</code> 而对应的位运算也就可以看作是对集合进行的操作。</p><p>元素与集合的操作：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span>  <span class="token operator">-</span><span class="token operator">></span> 把 i 插入到集合中a <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> 把 i 从集合中删除a <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span>  <span class="token operator">-</span><span class="token operator">></span> 判断 i 是否属于该集合（零不属于，非零属于）</code></pre><p>集合之间的操作：</p><pre class=" language-python"><code class="language-python">a 补   <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">~</span>aa 交 b <span class="token operator">-</span><span class="token operator">></span> a <span class="token operator">&amp;</span> ba 并 b <span class="token operator">-</span><span class="token operator">></span> a <span class="token operator">|</span> ba 差 b <span class="token operator">-</span><span class="token operator">></span> a <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span>b<span class="token punctuation">)</span></code></pre><p>注意：整数在内存中是以补码的形式存在的，输出自然也是按照补码输出。</p><p>【例子】C#语言输出负数。</p><pre class=" language-C#"><code class="language-C#">class Program&#123;    static void Main(string[] args)    &#123;        string s1 = Convert.ToString(-3, 2);        Console.WriteLine(s1);         // 11111111111111111111111111111101        string s2 = Convert.ToString(-3, 16);        Console.WriteLine(s2);         // fffffffd    &#125;&#125;</code></pre><p>【例子】 Python 的<code>bin()</code> 输出。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>bin<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0b11</span><span class="token keyword">print</span><span class="token punctuation">(</span>bin<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># -0b11</span><span class="token keyword">print</span><span class="token punctuation">(</span>bin<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0b11111111111111111111111111111101</span><span class="token keyword">print</span><span class="token punctuation">(</span>bin<span class="token punctuation">(</span><span class="token number">0xfffffffd</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 0b11111111111111111111111111111101</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0xfffffffd</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 4294967293</span></code></pre><p>是不是很颠覆认知，我们从结果可以看出：</p><ul><li>Python中<code>bin</code>一个负数（十进制表示），输出的是它的原码的二进制表示加上个负号，巨坑。</li><li>Python中的整型是补码形式存储的。</li><li>Python中整型是不限制长度的不会超范围溢出。</li></ul><p>所以为了获得负数（十进制表示）的补码，需要手动将其和十六进制数<code>0xffffffff</code>进行按位与操作，再交给<code>bin()</code>进行输出，得到的才是负数的补码表示。</p><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><h3 id="1-if-语句"><a href="#1-if-语句" class="headerlink" title="1. if 语句"></a>1. if 语句</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> expression<span class="token punctuation">:</span>    expr_true_suite</code></pre><ul><li>if 语句的 <code>expr_true_suite</code> 代码块只有当条件表达式 <code>expression</code> 结果为真时才执行，否则将继续执行紧跟在该代码块后面的语句。</li><li>单个 if 语句中的 <code>expression</code> 条件表达式可以通过布尔操作符 <code>and</code>，<code>or</code>和<code>not</code> 实现多重条件判断。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token number">2</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">and</span> <span class="token operator">not</span> <span class="token number">2</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Correct Judgement!'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Correct Judgement!</span></code></pre><h3 id="2-if-else-语句"><a href="#2-if-else-语句" class="headerlink" title="2. if - else 语句"></a>2. if - else 语句</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> expression<span class="token punctuation">:</span>    expr_true_suite<span class="token keyword">else</span><span class="token punctuation">:</span>    expr_false_suite</code></pre><ul><li>Python 提供与 if 搭配使用的 else，如果 if 语句的条件表达式结果布尔值为假，那么程序将执行 else 语句后的代码。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">temp <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"猜一猜小姐姐想的是哪个数字？"</span><span class="token punctuation">)</span>guess <span class="token operator">=</span> int<span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># input 函数将接收的任何数据类型都默认为 str。</span><span class="token keyword">if</span> guess <span class="token operator">==</span> <span class="token number">666</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你太了解小姐姐的心思了！"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"哼，猜对也没有奖励！"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"猜错了，小姐姐现在心里想的是666！"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"游戏结束，不玩儿啦！"</span><span class="token punctuation">)</span></code></pre><p><code>if</code>语句支持嵌套，即在一个<code>if</code>语句中嵌入另一个<code>if</code>语句，从而构成不同层次的选择结构。</p><p>【例子】Python 使用缩进而不是大括号来标记代码块边界，因此要特别注意<code>else</code>的悬挂问题。</p><pre class=" language-python"><code class="language-python">hi <span class="token operator">=</span> <span class="token number">6</span><span class="token keyword">if</span> hi <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> hi <span class="token operator">></span> <span class="token number">7</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'好棒!好棒!'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'切~'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 无输出</span></code></pre><p>【例子】</p><pre class=" language-python"><code class="language-python">temp <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"猜一猜小姐姐想的是哪个数字？"</span><span class="token punctuation">)</span>guess <span class="token operator">=</span> int<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token keyword">if</span> guess <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"大了，大了"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> guess <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你太了解小姐姐的心思了！"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"哼，猜对也没有奖励！"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小了，小了"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"游戏结束，不玩儿啦！"</span><span class="token punctuation">)</span></code></pre><h3 id="3-if-elif-else-语句"><a href="#3-if-elif-else-语句" class="headerlink" title="3. if - elif - else 语句"></a>3. if - elif - else 语句</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> expression1<span class="token punctuation">:</span>    expr1_true_suite<span class="token keyword">elif</span> expression2<span class="token punctuation">:</span>    expr2_true_suite    <span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token keyword">elif</span> expressionN<span class="token punctuation">:</span>    exprN_true_suite<span class="token keyword">else</span><span class="token punctuation">:</span>    expr_false_suite</code></pre><ul><li>elif 语句即为 else if，用来检查多个表达式是否为真，并在为真时执行特定代码块中的代码。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">temp <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入成绩:'</span><span class="token punctuation">)</span>source <span class="token operator">=</span> int<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token number">100</span> <span class="token operator">>=</span> source <span class="token operator">>=</span> <span class="token number">90</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> <span class="token number">90</span> <span class="token operator">></span> source <span class="token operator">>=</span> <span class="token number">80</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> <span class="token number">80</span> <span class="token operator">></span> source <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> <span class="token number">60</span> <span class="token operator">></span> source <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入错误！'</span><span class="token punctuation">)</span></code></pre><h3 id="4-assert-关键词"><a href="#4-assert-关键词" class="headerlink" title="4. assert 关键词"></a>4. assert 关键词</h3><ul><li><code>assert</code>这个关键词我们称之为“断言”，当这个关键词后边的条件为 False 时，程序自动崩溃并抛出<code>AssertionError</code>的异常。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'lsgogroup'</span><span class="token punctuation">]</span>my_list<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">assert</span> len<span class="token punctuation">(</span>my_list<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token comment" spellcheck="true"># AssertionError</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">assert</span> <span class="token number">3</span> <span class="token operator">></span> <span class="token number">7</span><span class="token comment" spellcheck="true"># AssertionError</span></code></pre><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="1-while-循环"><a href="#1-while-循环" class="headerlink" title="1. while 循环"></a>1. while 循环</h3><p><code>while</code>语句最基本的形式包括一个位于顶部的布尔表达式，一个或多个属于<code>while</code>代码块的缩进语句。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">while</span> 布尔表达式<span class="token punctuation">:</span>    代码块</code></pre><p><code>while</code>循环的代码块会一直循环执行，直到布尔表达式的值为布尔假。</p><p>如果布尔表达式不带有<code>&lt;、&gt;、==、！=、in、not in</code>等运算符，仅仅给出数值之类的条件，也是可以的。当<code>while</code>后写入一个非零整数时，视为真值，执行循环体；写入<code>0</code>时，视为假值，不执行循环体。也可以写入<code>str、list</code>或任何序列，长度非零则视为真值，执行循环体；否则视为假值，不执行循环体。</p><p>【例子】</p><pre class=" language-python"><code class="language-python">count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"猜一猜小姐姐想的是哪个数字？"</span><span class="token punctuation">)</span>    guess <span class="token operator">=</span> int<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>    <span class="token keyword">if</span> guess <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"大了，大了"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> guess <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你太了解小姐姐的心思了！"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"哼，猜对也没有奖励！"</span><span class="token punctuation">)</span>            count <span class="token operator">=</span> <span class="token number">3</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小了，小了"</span><span class="token punctuation">)</span>    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"游戏结束，不玩儿啦！"</span><span class="token punctuation">)</span></code></pre><hr><h3 id="2-while-else-循环"><a href="#2-while-else-循环" class="headerlink" title="2. while - else 循环"></a>2. while - else 循环</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">while</span> 布尔表达式<span class="token punctuation">:</span>    代码块<span class="token keyword">else</span><span class="token punctuation">:</span>    代码块</code></pre><p>当<code>while</code>循环正常执行完的情况下，执行<code>else</code>输出，如果<code>while</code>循环中执行了跳出循环的语句，比如 <code>break</code>，将不执行<code>else</code>代码块的内容。    </p><p>【例子】</p><pre class=" language-python"><code class="language-python">count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%d is  less than 5"</span> <span class="token operator">%</span> count<span class="token punctuation">)</span>    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%d is not less than 5"</span> <span class="token operator">%</span> count<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 0 is  less than 5</span><span class="token comment" spellcheck="true"># 1 is  less than 5</span><span class="token comment" spellcheck="true"># 2 is  less than 5</span><span class="token comment" spellcheck="true"># 3 is  less than 5</span><span class="token comment" spellcheck="true"># 4 is  less than 5</span><span class="token comment" spellcheck="true"># 5 is not less than 5</span></code></pre><p>【例子】</p><pre class=" language-python"><code class="language-python">count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%d is  less than 5"</span> <span class="token operator">%</span> count<span class="token punctuation">)</span>    count <span class="token operator">=</span> <span class="token number">6</span>    <span class="token keyword">break</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%d is not less than 5"</span> <span class="token operator">%</span> count<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 0 is  less than 5</span></code></pre><hr><h3 id="3-for-循环"><a href="#3-for-循环" class="headerlink" title="3. for 循环"></a>3. for 循环</h3><p><code>for</code>循环是迭代循环，在Python中相当于一个通用的序列迭代器，可以遍历任何有序序列，如<code>str、list、tuple</code>等，也可以遍历任何可迭代对象，如<code>dict</code>。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> 迭代变量 <span class="token keyword">in</span> 可迭代对象<span class="token punctuation">:</span>    代码块</code></pre><p>每次循环，迭代变量被设置为可迭代对象的当前元素，提供给代码块使用。</p><p>【例子】</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token string">'ILoveLSGO'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 不换行输出</span><span class="token comment" spellcheck="true"># I L o v e L S G O</span></code></pre><p>【例子】</p><pre class=" language-python"><code class="language-python">member <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token string">'刘德华'</span><span class="token punctuation">,</span> <span class="token string">'刘六'</span><span class="token punctuation">,</span> <span class="token string">'周润发'</span><span class="token punctuation">]</span><span class="token keyword">for</span> each <span class="token keyword">in</span> member<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 张三</span><span class="token comment" spellcheck="true"># 李四</span><span class="token comment" spellcheck="true"># 刘德华</span><span class="token comment" spellcheck="true"># 刘六</span><span class="token comment" spellcheck="true"># 周润发</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>member<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>member<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 张三</span><span class="token comment" spellcheck="true"># 李四</span><span class="token comment" spellcheck="true"># 刘德华</span><span class="token comment" spellcheck="true"># 刘六</span><span class="token comment" spellcheck="true"># 周润发</span></code></pre><p>【例子】</p><pre class=" language-python"><code class="language-python">dic <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'a': 1, 'b': 2, 'c': 3, 'd': 4&amp;#125;</span><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> dic<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">':'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># a:1 b:2 c:3 d:4 </span></code></pre><p>【例子】</p><pre class=" language-python"><code class="language-python">dic <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'a': 1, 'b': 2, 'c': 3, 'd': 4&amp;#125;</span><span class="token keyword">for</span> key <span class="token keyword">in</span> dic<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># a b c d </span></code></pre><p>【例子】</p><pre class=" language-python"><code class="language-python">dic <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'a': 1, 'b': 2, 'c': 3, 'd': 4&amp;#125;</span><span class="token keyword">for</span> value <span class="token keyword">in</span> dic<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1 2 3 4</span></code></pre><hr><h3 id="4-for-else-循环"><a href="#4-for-else-循环" class="headerlink" title="4. for - else 循环"></a>4. for - else 循环</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> 迭代变量 <span class="token keyword">in</span> 可迭代对象<span class="token punctuation">:</span>    代码块<span class="token keyword">else</span><span class="token punctuation">:</span>    代码块</code></pre><p>当<code>for</code>循环正常执行完的情况下，执行<code>else</code>输出，如果<code>for</code>循环中执行了跳出循环的语句，比如 <code>break</code>，将不执行<code>else</code>代码块的内容，与<code>while - else</code>语句一样。</p><p>【例子】</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 迭代 10 到 20 之间的数字</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 根据因子迭代</span>        <span class="token keyword">if</span> num <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 确定第一个因子</span>            j <span class="token operator">=</span> num <span class="token operator">/</span> i  <span class="token comment" spellcheck="true"># 计算第二个因子</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%d 等于 %d * %d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>num<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>  <span class="token comment" spellcheck="true"># 跳出当前循环</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 循环的 else 部分</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">'是一个质数'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 10 等于 2 * 5</span><span class="token comment" spellcheck="true"># 11 是一个质数</span><span class="token comment" spellcheck="true"># 12 等于 2 * 6</span><span class="token comment" spellcheck="true"># 13 是一个质数</span><span class="token comment" spellcheck="true"># 14 等于 2 * 7</span><span class="token comment" spellcheck="true"># 15 等于 3 * 5</span><span class="token comment" spellcheck="true"># 16 等于 2 * 8</span><span class="token comment" spellcheck="true"># 17 是一个质数</span><span class="token comment" spellcheck="true"># 18 等于 2 * 9</span><span class="token comment" spellcheck="true"># 19 是一个质数</span></code></pre><hr><h3 id="5-range-函数"><a href="#5-range-函数" class="headerlink" title="5. range() 函数"></a>5. range() 函数</h3><pre class=" language-python"><code class="language-python">range<span class="token punctuation">(</span><span class="token punctuation">[</span>start<span class="token punctuation">,</span><span class="token punctuation">]</span> stop<span class="token punctuation">[</span><span class="token punctuation">,</span> step<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><ul><li>这个BIF（Built-in functions）有三个参数，其中用中括号括起来的两个表示这两个参数是可选的。</li><li><code>step=1</code> 表示第三个参数的默认值是1。</li><li><code>range</code> 这个BIF的作用是生成一个从<code>start</code>参数的值开始到<code>stop</code>参数的值结束的数字序列，该序列包含<code>start</code>的值但不包含<code>stop</code>的值。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 不包含9</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2</span><span class="token comment" spellcheck="true"># 3</span><span class="token comment" spellcheck="true"># 4</span><span class="token comment" spellcheck="true"># 5</span><span class="token comment" spellcheck="true"># 6</span><span class="token comment" spellcheck="true"># 7</span><span class="token comment" spellcheck="true"># 8</span></code></pre><p>【例子】</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1</span><span class="token comment" spellcheck="true"># 3</span><span class="token comment" spellcheck="true"># 5</span><span class="token comment" spellcheck="true"># 7</span><span class="token comment" spellcheck="true"># 9</span></code></pre><hr><h3 id="6-enumerate-函数"><a href="#6-enumerate-函数" class="headerlink" title="6. enumerate()函数"></a>6. enumerate()函数</h3><pre class=" language-python"><code class="language-python">enumerate<span class="token punctuation">(</span>sequence<span class="token punctuation">,</span> <span class="token punctuation">[</span>start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><ul><li>sequence：一个序列、迭代器或其他支持迭代对象。</li><li>start：下标起始位置。</li><li>返回 enumerate(枚举) 对象</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">seasons <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Spring'</span><span class="token punctuation">,</span> <span class="token string">'Summer'</span><span class="token punctuation">,</span> <span class="token string">'Fall'</span><span class="token punctuation">,</span> <span class="token string">'Winter'</span><span class="token punctuation">]</span>lst <span class="token operator">=</span> list<span class="token punctuation">(</span>enumerate<span class="token punctuation">(</span>seasons<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]</span>lst <span class="token operator">=</span> list<span class="token punctuation">(</span>enumerate<span class="token punctuation">(</span>seasons<span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 下标从 1 开始</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]</span></code></pre><p><code>enumerate()</code>与 for 循环的结合使用。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i<span class="token punctuation">,</span> a <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>A<span class="token punctuation">)</span>    do something <span class="token keyword">with</span> a  </code></pre><p>用 <code>enumerate(A)</code> 不仅返回了 <code>A</code> 中的元素，还顺便给该元素一个索引值 (默认从 0 开始)。此外，用 <code>enumerate(A, j)</code> 还可以确定索引起始值为 <code>j</code>。</p><p>【例子】</p><pre class=" language-python"><code class="language-python">languages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Python'</span><span class="token punctuation">,</span> <span class="token string">'R'</span><span class="token punctuation">,</span> <span class="token string">'Matlab'</span><span class="token punctuation">,</span> <span class="token string">'C++'</span><span class="token punctuation">]</span><span class="token keyword">for</span> language <span class="token keyword">in</span> languages<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'I love'</span><span class="token punctuation">,</span> language<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Done!'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># I love Python</span><span class="token comment" spellcheck="true"># I love R</span><span class="token comment" spellcheck="true"># I love Matlab</span><span class="token comment" spellcheck="true"># I love C++</span><span class="token comment" spellcheck="true"># Done!</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> language <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>languages<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">'I love'</span><span class="token punctuation">,</span> language<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Done!'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2 I love Python</span><span class="token comment" spellcheck="true"># 3 I love R</span><span class="token comment" spellcheck="true"># 4 I love Matlab</span><span class="token comment" spellcheck="true"># 5 I love C++</span><span class="token comment" spellcheck="true"># Done!</span></code></pre><hr><h3 id="7-break-语句"><a href="#7-break-语句" class="headerlink" title="7. break 语句"></a>7. break 语句</h3><p><code>break</code>语句可以跳出当前所在层的循环。</p><p>【例子】</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> randomsecret <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#[1,10]之间的随机数</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"猜一猜小姐姐想的是哪个数字？"</span><span class="token punctuation">)</span>    guess <span class="token operator">=</span> int<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>    <span class="token keyword">if</span> guess <span class="token operator">></span> secret<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"大了，大了"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> guess <span class="token operator">==</span> secret<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你太了解小姐姐的心思了！"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"哼，猜对也没有奖励！"</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小了，小了"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"游戏结束，不玩儿啦！"</span><span class="token punctuation">)</span></code></pre><hr><h3 id="8-continue-语句"><a href="#8-continue-语句" class="headerlink" title="8. continue 语句"></a>8. continue 语句</h3><p><code>continue</code>终止本轮循环并开始下一轮循环。</p><p>【例子】</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">continue</span>    i <span class="token operator">+=</span> <span class="token number">2</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2</span><span class="token comment" spellcheck="true"># 1</span><span class="token comment" spellcheck="true"># 4</span><span class="token comment" spellcheck="true"># 3</span><span class="token comment" spellcheck="true"># 6</span><span class="token comment" spellcheck="true"># 5</span><span class="token comment" spellcheck="true"># 8</span><span class="token comment" spellcheck="true"># 7</span><span class="token comment" spellcheck="true"># 10</span><span class="token comment" spellcheck="true"># 9</span></code></pre><hr><h3 id="9-pass-语句"><a href="#9-pass-语句" class="headerlink" title="9. pass 语句"></a>9. pass 语句</h3><p><code>pass</code> 语句的意思是“不做任何事”，如果你在需要有语句的地方不写任何语句，那么解释器会提示出错，而 <code>pass</code> 语句就是用来解决这些问题的。</p><p>【例子】</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">a_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># SyntaxError: unexpected EOF while parsing</span></code></pre><p>【例子】</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">a_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><p><code>pass</code>是空语句，不做任何操作，只起到占位的作用，其作用是为了保持程序结构的完整性。尽管<code>pass</code>语句不做任何操作，但如果暂时不确定要在一个位置放上什么样的代码，可以先放置一个<code>pass</code>语句，让代码可以正常运行。</p><hr><h3 id="10-推导式"><a href="#10-推导式" class="headerlink" title="10. 推导式"></a>10. 推导式</h3><h4 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h4><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span> expr <span class="token keyword">for</span> value <span class="token keyword">in</span> collection <span class="token punctuation">[</span><span class="token keyword">if</span> condition<span class="token punctuation">]</span> <span class="token punctuation">]</span></code></pre><p>【例子】</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span>a <span class="token operator">*</span> <span class="token number">2</span> <span class="token keyword">for</span> a <span class="token keyword">in</span> x<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [-8, -4, 0, 4, 8]</span></code></pre><p>【例子】</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token operator">**</span> <span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [1, 4, 9, 16, 25, 36, 49, 64, 81]</span></code></pre><p>【例子】</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]</span></code></pre><p>【例子】</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">and</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99]</span></code></pre><p>【例子】</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]</span></code></pre><p>【例子】</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [[10, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]</span></code></pre><p>【例子】</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">if</span> j <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [(0, 2)]</span></code></pre><h4 id="元组推导式"><a href="#元组推导式" class="headerlink" title="元组推导式"></a>元组推导式</h4><pre class=" language-python"><code class="language-python"><span class="token punctuation">(</span> expr <span class="token keyword">for</span> value <span class="token keyword">in</span> collection <span class="token punctuation">[</span><span class="token keyword">if</span> condition<span class="token punctuation">]</span> <span class="token punctuation">)</span></code></pre><p>【例子】</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &lt;generator object &lt;genexpr> at 0x0000025BE511CC48></span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)</span></code></pre><h4 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h4><pre class=" language-python"><code class="language-python"><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; key_expr: value_expr for value in collection [if condition] &amp;#125;</span></code></pre><p>【例子】</p><pre class=" language-python"><code class="language-python">b <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;i: i % 2 == 0 for i in range(10) if i % 3 == 0&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &amp;#123;0: True, 3: False, 6: True, 9: False&amp;#125;</span></code></pre><h4 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h4><pre class=" language-python"><code class="language-python"><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; expr for value in collection [if condition] &amp;#125;</span></code></pre><p>【例子】</p><pre class=" language-python"><code class="language-python">c <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;i for i in [1, 2, 3, 4, 5, 5, 6, 4, 3, 2, 1]&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &amp;#123;1, 2, 3, 4, 5, 6&amp;#125;</span></code></pre><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><ul><li><code>next(iterator[, default])</code> Return the next item from the iterator. If default is given and the iterator is exhausted, it is returned instead of raising Stop Iteration.</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">e <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &lt;generator object &lt;genexpr> at 0x0000007A0B8D01B0></span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span><span class="token keyword">for</span> each <span class="token keyword">in</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2 3 4 5 6 7 8 9</span></code></pre><p>【例子】</p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> sum<span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 5050</span>s <span class="token operator">=</span> sum<span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 5050</span></code></pre><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>异常就是运行期检测到的错误。计算机语言针对可能出现的错误定义了异常类型，某种错误引发对应的异常时，异常处理程序将被启动，从而恢复程序的正常运行。</p><h3 id="1-Python-标准异常总结"><a href="#1-Python-标准异常总结" class="headerlink" title="1. Python 标准异常总结"></a>1. Python 标准异常总结</h3><ul><li>BaseException：所有异常的 <strong>基类</strong></li><li>Exception：常规异常的 <strong>基类</strong></li><li>StandardError：所有的内建标准异常的基类</li><li>ArithmeticError：所有数值计算异常的基类</li><li>FloatingPointError：浮点计算异常</li><li><u>OverflowError</u>：数值运算超出最大限制</li><li><u>ZeroDivisionError</u>：除数为零</li><li><u>AssertionError</u>：断言语句（assert）失败</li><li><u>AttributeError</u>：尝试访问未知的对象属性</li><li>EOFError：没有内建输入，到达EOF标记</li><li>EnvironmentError：操作系统异常的基类</li><li>IOError：输入/输出操作失败</li><li><u>OSError</u>：操作系统产生的异常（例如打开一个不存在的文件）</li><li>WindowsError：系统调用失败</li><li><u>ImportError</u>：导入模块失败的时候</li><li>KeyboardInterrupt：用户中断执行</li><li>LookupError：无效数据查询的基类</li><li><u>IndexError</u>：索引超出序列的范围</li><li><u>KeyError</u>：字典中查找一个不存在的关键字</li><li><u>MemoryError</u>：内存溢出（可通过删除对象释放内存）</li><li><u>NameError</u>：尝试访问一个不存在的变量</li><li>UnboundLocalError：访问未初始化的本地变量</li><li>ReferenceError：弱引用试图访问已经垃圾回收了的对象</li><li>RuntimeError：一般的运行时异常</li><li>NotImplementedError：尚未实现的方法</li><li><u>SyntaxError</u>：语法错误导致的异常</li><li>IndentationError：缩进错误导致的异常</li><li>TabError：Tab和空格混用</li><li>SystemError：一般的解释器系统异常</li><li><u>TypeError</u>：不同类型间的无效操作</li><li><u>ValueError</u>：传入无效的参数</li><li>UnicodeError：Unicode相关的异常</li><li>UnicodeDecodeError：Unicode解码时的异常</li><li>UnicodeEncodeError：Unicode编码错误导致的异常</li><li>UnicodeTranslateError：Unicode转换错误导致的异常</li></ul><p>异常体系内部有层次关系，Python异常体系中的部分关系如下所示：</p><p><img src="https://gitee.com/niu_dehua/oss/raw/master/uPic/SF51E36otkNDlQ9.png"></p><hr><h3 id="2-Python标准警告总结"><a href="#2-Python标准警告总结" class="headerlink" title="2. Python标准警告总结"></a>2. Python标准警告总结</h3><ul><li><p>Warning：警告的基类</p></li><li><p>DeprecationWarning：关于被弃用的特征的警告</p></li><li><p>FutureWarning：关于构造将来语义会有改变的警告</p></li><li><p>UserWarning：用户代码生成的警告</p></li><li><p>PendingDeprecationWarning：关于特性将会被废弃的警告</p></li><li><p>RuntimeWarning：可疑的运行时行为(runtime behavior)的警告</p></li><li><p>SyntaxWarning：可疑语法的警告</p></li><li><p>ImportWarning：用于在导入模块过程中触发的警告</p></li><li><p>UnicodeWarning：与Unicode相关的警告</p></li><li><p>BytesWarning：与字节或字节码相关的警告</p></li><li><p>ResourceWarning：与资源使用相关的警告</p><hr></li></ul><h3 id="3-try-except-语句"><a href="#3-try-except-语句" class="headerlink" title="3. try - except 语句"></a>3. try - except 语句</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    检测范围<span class="token keyword">except</span> Exception<span class="token punctuation">[</span><span class="token keyword">as</span> reason<span class="token punctuation">]</span><span class="token punctuation">:</span>    出现异常后的处理代码</code></pre><p>try 语句按照如下方式工作：</p><ul><li>首先，执行<code>try</code>子句（在关键字<code>try</code>和关键字<code>except</code>之间的语句）</li><li>如果没有异常发生，忽略<code>except</code>子句，<code>try</code>子句执行后结束。</li><li>如果在执行<code>try</code>子句的过程中发生了异常，那么<code>try</code>子句余下的部分将被忽略。如果异常的类型和<code>except</code>之后的名称相符，那么对应的<code>except</code>子句将被执行。最后执行<code>try - except</code>语句之后的代码。</li><li>如果一个异常没有与任何的<code>except</code>匹配，那么这个异常将会传递给上层的<code>try</code>中。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> OSError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'打开文件出错'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打开文件出错</span></code></pre><p>【例子】</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> OSError <span class="token keyword">as</span> error<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'打开文件出错\n原因是：'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打开文件出错</span><span class="token comment" spellcheck="true"># 原因是：[Errno 2] No such file or directory: 'test.txt'</span></code></pre><p>【例子】一个<code>try</code>语句可能包含多个<code>except</code>子句，分别来处理不同的特定的异常。最多只有一个分支会被执行。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    int<span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token string">'1'</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> OSError <span class="token keyword">as</span> error<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'打开文件出错\n原因是：'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> TypeError <span class="token keyword">as</span> error<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'类型出错\n原因是：'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> ValueError <span class="token keyword">as</span> error<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'数值出错\n原因是：'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 数值出错</span><span class="token comment" spellcheck="true"># 原因是：invalid literal for int() with base 10: 'abc'</span></code></pre><p>【例子】<code>try-except-else</code>语句尝试查询不在<code>dict</code>中的键值对，从而引发了异常。这一异常准确地说应属于<code>KeyError</code>，但由于<code>KeyError</code>是<code>LookupError</code>的子类，且将<code>LookupError</code>置于<code>KeyError</code>之前，因此程序优先执行该<code>except</code>代码块。所以，使用多个<code>except</code>代码块时，必须坚持对其规范排序，要从最具针对性的异常到最通用的异常。</p><pre class=" language-python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'a': 1, 'b': 2, 'v': 22&amp;#125;</span><span class="token keyword">try</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> dict1<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token keyword">except</span> LookupError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'查询错误'</span><span class="token punctuation">)</span><span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'键错误'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查询错误</span></code></pre><p>【例子】</p><pre class=" language-python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'a': 1, 'b': 2, 'v': 22&amp;#125;</span><span class="token keyword">try</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> dict1<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'键错误'</span><span class="token punctuation">)</span><span class="token keyword">except</span> LookupError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'查询错误'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 键错误</span></code></pre><p>【例子】一个 <code>except</code> 子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token string">'1'</span>    int<span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> <span class="token punctuation">(</span>OSError<span class="token punctuation">,</span> TypeError<span class="token punctuation">,</span> ValueError<span class="token punctuation">)</span> <span class="token keyword">as</span> error<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'出错了！\n原因是：'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 出错了！</span><span class="token comment" spellcheck="true"># 原因是：unsupported operand type(s) for +: 'int' and 'str'</span></code></pre><hr><h3 id="4-try-except-finally-语句"><a href="#4-try-except-finally-语句" class="headerlink" title="4. try - except - finally 语句"></a>4. try - except - finally 语句</h3><p>try:<br>    检测范围<br>except Exception[as reason]:<br>    出现异常后的处理代码<br>finally:<br>    无论如何都会被执行的代码</p><p>不管<code>try</code>子句里面有没有发生异常，<code>finally</code>子句都会执行。</p><p>【例子】如果一个异常在<code>try</code>子句里被抛出，而又没有任何的<code>except</code>把它截住，那么这个异常会在<code>finally</code>子句执行后被抛出。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">divide</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> x <span class="token operator">/</span> y        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"result is"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>    <span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"division by zero!"</span><span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"executing finally clause"</span><span class="token punctuation">)</span>divide<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># result is 2.0</span><span class="token comment" spellcheck="true"># executing finally clause</span>divide<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># division by zero!</span><span class="token comment" spellcheck="true"># executing finally clause</span>divide<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># executing finally clause</span><span class="token comment" spellcheck="true"># TypeError: unsupported operand type(s) for /: 'str' and 'str'</span></code></pre><hr><h3 id="5-try-except-else-语句"><a href="#5-try-except-else-语句" class="headerlink" title="5. try - except - else 语句"></a>5. try - except - else 语句</h3><p>如果在<code>try</code>子句执行时没有发生异常，Python将执行<code>else</code>语句后的语句。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    检测范围<span class="token keyword">except</span><span class="token punctuation">:</span>    出现异常后的处理代码<span class="token keyword">else</span><span class="token punctuation">:</span>    如果没有异常执行这块代码</code></pre><p>使用<code>except</code>而不带任何异常类型，这不是一个很好的方式，我们不能通过该程序识别出具体的异常信息，因为它捕获所有的异常。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    检测范围<span class="token keyword">except</span><span class="token punctuation">(</span>Exception1<span class="token punctuation">[</span><span class="token punctuation">,</span> Exception2<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>ExceptionN<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   发生以上多个异常中的一个，执行这块代码<span class="token keyword">else</span><span class="token punctuation">:</span>    如果没有异常执行这块代码【例子】</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    fh <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"testfile.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>    fh<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"这是一个测试文件，用于测试异常!!"</span><span class="token punctuation">)</span><span class="token keyword">except</span> IOError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error: 没有找到文件或读取文件失败"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"内容写入文件成功"</span><span class="token punctuation">)</span>    fh<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 内容写入文件成功</span></code></pre><p>注意：<code>else</code>语句的存在必须以<code>except</code>语句的存在为前提，在没有<code>except</code>语句的<code>try</code>语句中使用<code>else</code>语句，会引发语法错误。</p><hr><h3 id="6-raise语句"><a href="#6-raise语句" class="headerlink" title="6. raise语句"></a>6. raise语句</h3><p>Python 使用<code>raise</code>语句抛出一个指定的异常。</p><p>【例子】</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> NameError<span class="token punctuation">(</span><span class="token string">'HiThere'</span><span class="token punctuation">)</span><span class="token keyword">except</span> NameError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'An exception flew by!'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># An exception flew by!</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础练习：数据结构大汇总</title>
      <link href="2020/09/13/python-ji-chu-lian-xi-shu-ju-jie-gou-da-hui-zong/"/>
      <url>2020/09/13/python-ji-chu-lian-xi-shu-ju-jie-gou-da-hui-zong/</url>
      
        <content type="html"><![CDATA[<hr><p>[TOC]</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Python 是一种通用编程语言，其在科学计算和机器学习领域具有广泛的应用。如果我们打算利用 Python 来执行机器学习，那么对 Python 有一些基本的了解就是至关重要的。本 Python 入门系列体验就是为这样的初学者精心准备的。</p><p><strong>本实验包括以下内容</strong>：</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>简单数据类型</p><ul><li>整型<code>&lt;class &#39;int&#39;&gt;</code></li><li>浮点型<code>&lt;class &#39;float&#39;&gt;</code></li><li>布尔型<code>&lt;class &#39;bool&#39;&gt;</code></li></ul><p>容器数据类型</p><ul><li>列表<code>&lt;class &#39;list&#39;&gt;</code></li><li>元组<code>&lt;class &#39;tuple&#39;&gt;</code></li><li>字典<code>&lt;class &#39;dict&#39;&gt;</code></li><li>集合<code>&lt;class &#39;set&#39;&gt;</code></li><li>字符串<code>&lt;class &#39;str&#39;&gt;</code></li></ul><h3 id="1-列表的定义"><a href="#1-列表的定义" class="headerlink" title="1. 列表的定义"></a>1. 列表的定义</h3><p>列表是有序集合，没有固定大小，能够保存任意数量任意类型的 Python 对象，语法为 <code>[元素1, 元素2, ..., 元素n]</code>。</p><ul><li>关键点是「中括号 []」和「逗号 ,」</li><li>中括号 把所有元素绑在一起</li><li>逗号 将每个元素一一分开</li></ul><h3 id="2-列表的创建"><a href="#2-列表的创建" class="headerlink" title="2. 列表的创建"></a>2. 列表的创建</h3><ul><li>创建一个普通列表</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Monday'</span><span class="token punctuation">,</span> <span class="token string">'Tuesday'</span><span class="token punctuation">,</span> <span class="token string">'Wednesday'</span><span class="token punctuation">,</span> <span class="token string">'Thursday'</span><span class="token punctuation">,</span> <span class="token string">'Friday'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'] &lt;class 'list'></span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [2, 3, 4, 5, 6, 7] &lt;class 'list'></span></code></pre><ul><li>利用<code>range()</code>创建列表</li></ul><p>【例子】 </p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &lt;class 'list'></span>x <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [1, 3, 5, 7, 9] &lt;class 'list'></span>x <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [10, 8, 6, 4, 2] &lt;class 'list'></span></code></pre><ul><li>利用推导式创建列表</li></ul><p>【例子】 </p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [0, 0, 0, 0, 0] &lt;class 'list'></span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [0, 0, 0, 0, 0] &lt;class 'list'></span>x <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &lt;class 'list'></span>x <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [1, 3, 5, 7, 9] &lt;class 'list'></span>x <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [10, 8, 6, 4, 2] &lt;class 'list'></span>x <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token operator">**</span> <span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [1, 4, 9, 16, 25, 36, 49, 64, 81] &lt;class 'list'></span>x <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">and</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [3, 9, 15, 21, 27, 33, 39,</span></code></pre><p>注意：</p><p>由于list的元素可以是任何对象，因此列表中所保存的是对象的指针。即使保存一个简单的<code>[1,2,3]</code>，也有3个指针和3个整数对象。</p><p><code>x = [a] * 4</code>操作中，只是创建4个指向list的引用，所以一旦<code>a</code>改变，<code>x</code>中4个<code>a</code>也会随之改变。</p><p>【例子】</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &lt;class 'list'></span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &lt;class 'list'></span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span>x <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &lt;class 'list'></span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &lt;class 'list'></span></code></pre><ul><li>创建一个混合列表</li></ul><p>【例子】 </p><pre class=" language-python"><code class="language-python">mix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'lsgo'</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>mix<span class="token punctuation">,</span> type<span class="token punctuation">(</span>mix<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [1, 'lsgo', 3.14, [1, 2, 3]] &lt;class 'list'></span></code></pre><ul><li>创建一个空列表</li></ul><p>【例子】 </p><pre class=" language-python"><code class="language-python">empty <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>empty<span class="token punctuation">,</span> type<span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [] &lt;class 'list'></span></code></pre><p>列表不像元组，列表内容可更改 (mutable)，因此附加 (<code>append</code>, <code>extend</code>)、插入 (<code>insert</code>)、删除 (<code>remove</code>, <code>pop</code>) 这些操作都可以用在它身上。</p><h3 id="3-向列表中添加元素"><a href="#3-向列表中添加元素" class="headerlink" title="3. 向列表中添加元素"></a>3. 向列表中添加元素</h3><ul><li><code>list.append(obj)</code> 在列表末尾添加新的对象，只接受一个参数，参数可以是任何数据类型，被追加的元素在 list 中保持着原结构类型。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Monday'</span><span class="token punctuation">,</span> <span class="token string">'Tuesday'</span><span class="token punctuation">,</span> <span class="token string">'Wednesday'</span><span class="token punctuation">,</span> <span class="token string">'Thursday'</span><span class="token punctuation">,</span> <span class="token string">'Friday'</span><span class="token punctuation">]</span>x<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'Thursday'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Thursday']</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 6</span></code></pre><p>此元素如果是一个 list，那么这个 list 将作为一个整体进行追加，注意<code>append()</code>和<code>extend()</code>的区别。</p><p>【例子】</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Monday'</span><span class="token punctuation">,</span> <span class="token string">'Tuesday'</span><span class="token punctuation">,</span> <span class="token string">'Wednesday'</span><span class="token punctuation">,</span> <span class="token string">'Thursday'</span><span class="token punctuation">,</span> <span class="token string">'Friday'</span><span class="token punctuation">]</span>x<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Thursday'</span><span class="token punctuation">,</span> <span class="token string">'Sunday'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', ['Thursday', 'Sunday']]</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 6</span></code></pre><ul><li><code>list.extend(seq)</code> 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Monday'</span><span class="token punctuation">,</span> <span class="token string">'Tuesday'</span><span class="token punctuation">,</span> <span class="token string">'Wednesday'</span><span class="token punctuation">,</span> <span class="token string">'Thursday'</span><span class="token punctuation">,</span> <span class="token string">'Friday'</span><span class="token punctuation">]</span>x<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Thursday'</span><span class="token punctuation">,</span> <span class="token string">'Sunday'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Thursday', 'Sunday']</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 7</span></code></pre><p>严格来说 <code>append</code> 是追加，把一个东西整体添加在列表后，而 <code>extend</code> 是扩展，把一个东西里的所有元素添加在列表后。</p><ul><li><code>list.insert(index, obj)</code> 在编号 <code>index</code> 位置插入 <code>obj</code>。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Monday'</span><span class="token punctuation">,</span> <span class="token string">'Tuesday'</span><span class="token punctuation">,</span> <span class="token string">'Wednesday'</span><span class="token punctuation">,</span> <span class="token string">'Thursday'</span><span class="token punctuation">,</span> <span class="token string">'Friday'</span><span class="token punctuation">]</span>x<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Sunday'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['Monday', 'Tuesday', 'Sunday', 'Wednesday', 'Thursday', 'Friday']</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 6</span></code></pre><h3 id="4-删除列表中的元素"><a href="#4-删除列表中的元素" class="headerlink" title="4. 删除列表中的元素"></a>4. 删除列表中的元素</h3><ul><li><code>list.remove(obj)</code> 移除列表中某个值的第一个匹配项</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Monday'</span><span class="token punctuation">,</span> <span class="token string">'Tuesday'</span><span class="token punctuation">,</span> <span class="token string">'Wednesday'</span><span class="token punctuation">,</span> <span class="token string">'Thursday'</span><span class="token punctuation">,</span> <span class="token string">'Friday'</span><span class="token punctuation">]</span>x<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'Monday'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['Tuesday', 'Wednesday', 'Thursday', 'Friday']</span></code></pre><ul><li><code>list.pop([index=-1])</code> 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Monday'</span><span class="token punctuation">,</span> <span class="token string">'Tuesday'</span><span class="token punctuation">,</span> <span class="token string">'Wednesday'</span><span class="token punctuation">,</span> <span class="token string">'Thursday'</span><span class="token punctuation">,</span> <span class="token string">'Friday'</span><span class="token punctuation">]</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Friday</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Monday</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Wednesday</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['Tuesday', 'Thursday']</span></code></pre><p><code>remove</code> 和 <code>pop</code> 都可以删除元素，前者是指定具体要删除的元素，后者是指定一个索引。</p><ul><li><code>del var1[, var2 ……]</code> 删除单个或多个对象。</li></ul><p>【例子】</p><p>如果知道要删除的元素在列表中的位置，可使用<code>del</code>语句。</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Monday'</span><span class="token punctuation">,</span> <span class="token string">'Tuesday'</span><span class="token punctuation">,</span> <span class="token string">'Wednesday'</span><span class="token punctuation">,</span> <span class="token string">'Thursday'</span><span class="token punctuation">,</span> <span class="token string">'Friday'</span><span class="token punctuation">]</span><span class="token keyword">del</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['Wednesday', 'Thursday', 'Friday']</span></code></pre><p>如果你要从列表中删除一个元素，且不再以任何方式使用它，就使用<code>del</code>语句；如果你要在删除元素后还能继续使用它，就使用方法<code>pop()</code>。</p><h3 id="5-获取列表中的元素"><a href="#5-获取列表中的元素" class="headerlink" title="5. 获取列表中的元素"></a>5. 获取列表中的元素</h3><ul><li>通过元素的索引值，从列表获取单个元素，注意，列表索引值是从0开始的。</li><li>通过将索引指定为-1，可让Python返回最后一个列表元素，索引 -2 返回倒数第二个列表元素，以此类推。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Monday'</span><span class="token punctuation">,</span> <span class="token string">'Tuesday'</span><span class="token punctuation">,</span> <span class="token string">'Wednesday'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Thursday'</span><span class="token punctuation">,</span> <span class="token string">'Friday'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> type<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Monday &lt;class 'str'></span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> type<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['Thursday', 'Friday'] &lt;class 'list'></span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> type<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Wednesday &lt;class 'str'></span></code></pre><p>切片的通用写法是 <code>start : stop : step</code></p><ul><li>情况 1 - “start :” </li><li>以 <code>step</code> 为 1 (默认) 从编号 <code>start</code> 往列表尾部切片。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Monday'</span><span class="token punctuation">,</span> <span class="token string">'Tuesday'</span><span class="token punctuation">,</span> <span class="token string">'Wednesday'</span><span class="token punctuation">,</span> <span class="token string">'Thursday'</span><span class="token punctuation">,</span> <span class="token string">'Friday'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['Thursday', 'Friday']</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['Wednesday', 'Thursday', 'Friday']</span></code></pre><ul><li>情况 2 - “: stop”</li><li>以 <code>step</code> 为 1 (默认) 从列表头部往编号 <code>stop</code> 切片。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">week <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Monday'</span><span class="token punctuation">,</span> <span class="token string">'Tuesday'</span><span class="token punctuation">,</span> <span class="token string">'Wednesday'</span><span class="token punctuation">,</span> <span class="token string">'Thursday'</span><span class="token punctuation">,</span> <span class="token string">'Friday'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>week<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['Monday', 'Tuesday', 'Wednesday']</span><span class="token keyword">print</span><span class="token punctuation">(</span>week<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['Monday', 'Tuesday']</span></code></pre><ul><li>情况 3 - “start : stop”</li><li>以 <code>step</code> 为 1 (默认) 从编号 <code>start</code> 往编号 <code>stop</code> 切片。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">week <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Monday'</span><span class="token punctuation">,</span> <span class="token string">'Tuesday'</span><span class="token punctuation">,</span> <span class="token string">'Wednesday'</span><span class="token punctuation">,</span> <span class="token string">'Thursday'</span><span class="token punctuation">,</span> <span class="token string">'Friday'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>week<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['Tuesday', 'Wednesday']</span><span class="token keyword">print</span><span class="token punctuation">(</span>week<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['Wednesday', 'Thursday']</span></code></pre><ul><li>情况 4 - “start : stop : step”</li><li>以具体的 <code>step</code> 从编号 <code>start</code> 往编号 <code>stop</code> 切片。注意最后把 <code>step</code> 设为 -1，相当于将列表反向排列。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">week <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Monday'</span><span class="token punctuation">,</span> <span class="token string">'Tuesday'</span><span class="token punctuation">,</span> <span class="token string">'Wednesday'</span><span class="token punctuation">,</span> <span class="token string">'Thursday'</span><span class="token punctuation">,</span> <span class="token string">'Friday'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>week<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['Tuesday', 'Thursday']</span><span class="token keyword">print</span><span class="token punctuation">(</span>week<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['Monday', 'Wednesday']</span><span class="token keyword">print</span><span class="token punctuation">(</span>week<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['Tuesday', 'Thursday']</span><span class="token keyword">print</span><span class="token punctuation">(</span>week<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['Friday', 'Thursday', 'Wednesday', 'Tuesday', 'Monday']</span></code></pre><ul><li>情况 5 - “ : “</li><li>复制列表中的所有元素（浅拷贝）。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">week <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Monday'</span><span class="token punctuation">,</span> <span class="token string">'Tuesday'</span><span class="token punctuation">,</span> <span class="token string">'Wednesday'</span><span class="token punctuation">,</span> <span class="token string">'Thursday'</span><span class="token punctuation">,</span> <span class="token string">'Friday'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>week<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']</span></code></pre><p>【例子】浅拷贝与深拷贝</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">,</span> <span class="token number">789</span><span class="token punctuation">,</span> <span class="token number">213</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> list1list3 <span class="token operator">=</span> list1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [123, 456, 789, 213]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [123, 456, 789, 213]</span>list1<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [123, 213, 456, 789] </span><span class="token keyword">print</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [123, 456, 789, 213]</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">789</span><span class="token punctuation">,</span> <span class="token number">213</span><span class="token punctuation">]</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> list1list3 <span class="token operator">=</span> list1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [[123, 456], [789, 213]]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [[123, 456], [789, 213]]</span>list1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">111</span><span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [[111, 456], [789, 213]]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [[111, 456], [789, 213]]</span></code></pre><h3 id="6-列表的常用操作符"><a href="#6-列表的常用操作符" class="headerlink" title="6. 列表的常用操作符"></a>6. 列表的常用操作符</h3><ul><li>等号操作符：<code>==</code></li><li>连接操作符 <code>+</code></li><li>重复操作符 <code>*</code></li><li>成员关系操作符 <code>in</code>、<code>not in</code></li></ul><p>「等号 ==」，只有成员、成员位置都相同时才返回True。</p><p>列表拼接有两种方式，用「加号 +」和「乘号 *」，前者首尾拼接，后者复制拼接。</p><p>【例子】</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">456</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">]</span>list3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1 <span class="token operator">==</span> list2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1 <span class="token operator">==</span> list3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span>list4 <span class="token operator">=</span> list1 <span class="token operator">+</span> list2  <span class="token comment" spellcheck="true"># extend()</span><span class="token keyword">print</span><span class="token punctuation">(</span>list4<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [123, 456, 456, 123]</span>list5 <span class="token operator">=</span> list3 <span class="token operator">*</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>list5<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [123, 456, 123, 456, 123, 456]</span>list3 <span class="token operator">*=</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [123, 456, 123, 456, 123, 456]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token keyword">in</span> list3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">456</span> <span class="token operator">not</span> <span class="token keyword">in</span> list3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span></code></pre><p>前面三种方法（<code>append</code>, <code>extend</code>, <code>insert</code>）可对列表增加元素，它们没有返回值，是直接修改了原数据对象。<br>而将两个list相加，需要创建新的 list 对象，从而需要消耗额外的内存，特别是当 list 较大时，尽量不要使用 “+” 来添加list。</p><h3 id="7-列表的其它方法"><a href="#7-列表的其它方法" class="headerlink" title="7. 列表的其它方法"></a>7. 列表的其它方法</h3><p><code>list.count(obj)</code> 统计某个元素在列表中出现的次数</p><p>【例子】</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [123, 456, 123, 456, 123, 456]</span>num <span class="token operator">=</span> list1<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 3</span></code></pre><p><code>list.index(x[, start[, end]])</code> 从列表中找出某个值第一个匹配项的索引位置</p><p>【例子】</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 4</span></code></pre><p><code>list.reverse()</code> 反向列表中元素</p><p>【例子】</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">,</span> <span class="token number">789</span><span class="token punctuation">]</span>x<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [789, 456, 123]</span></code></pre><p><code>list.sort(key=None, reverse=False)</code> 对原列表进行排序。</p><ul><li><code>key</code> – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</li><li><code>reverse</code> – 排序规则，<code>reverse = True</code> 降序， <code>reverse = False</code> 升序（默认）。</li><li>该方法没有返回值，但是会对列表的对象进行排序。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">,</span> <span class="token number">789</span><span class="token punctuation">,</span> <span class="token number">213</span><span class="token punctuation">]</span>x<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [123, 213, 456, 789]</span>x<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [789, 456, 213, 123]</span><span class="token comment" spellcheck="true"># 获取列表的第二个元素</span><span class="token keyword">def</span> <span class="token function">takeSecond</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> elem<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>x<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span>takeSecond<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [(4, 1), (2, 2), (1, 3), (3, 4)]</span>x<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> a<span class="token punctuation">:</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [(1, 3), (2, 2), (3, 4), (4, 1)]</span></code></pre><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><h3 id="1-元组的定义"><a href="#1-元组的定义" class="headerlink" title="1. 元组的定义"></a>1. 元组的定义</h3><p>「元组」定义语法为：<code>(元素1, 元素2, ..., 元素n)</code></p><ul><li>小括号把所有元素绑在一起</li><li>逗号将每个元素一一分开</li></ul><h3 id="2-创建和访问一个元组"><a href="#2-创建和访问一个元组" class="headerlink" title="2. 创建和访问一个元组"></a>2. 创建和访问一个元组</h3><ul><li>Python 的元组与列表类似，不同之处在于tuple被创建后就不能对其进行修改，类似字符串。</li><li>元组使用小括号，列表使用方括号。</li><li>元组与列表类似，也用整数来对它进行索引 (indexing) 和切片 (slicing)。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10.31</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10.31</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> type<span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># (1, 10.31, 'python') &lt;class 'tuple'></span><span class="token keyword">print</span><span class="token punctuation">(</span>t2<span class="token punctuation">,</span> type<span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># (1, 10.31, 'python') &lt;class 'tuple'></span>tuple1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># (6, 7, 8)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># (1, 2, 3, 4, 5)</span>tuple2 <span class="token operator">=</span> tuple1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># (1, 2, 3, 4, 5, 6, 7, 8)</span></code></pre><ul><li>创建元组可以用小括号 ()，也可以什么都不用，为了可读性，建议还是用 ()。</li><li>元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'int'></span>x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'tuple'></span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'list'></span>x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'tuple'></span>x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'tuple'></span></code></pre><p>【例子】</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 64</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># (8, 8, 8, 8, 8, 8, 8, 8)</span></code></pre><p>【例子】创建二维元组。</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10.31</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ((1, 10.31, 'python'), ('data', 11))</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># (1, 10.31, 'python')</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1 10.31 python</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># (1, 10.31)</span></code></pre><h3 id="3-更新和删除一个元组"><a href="#3-更新和删除一个元组" class="headerlink" title="3. 更新和删除一个元组"></a>3. 更新和删除一个元组</h3><p>【例子】</p><pre class=" language-python"><code class="language-python">week <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'Monday'</span><span class="token punctuation">,</span> <span class="token string">'Tuesday'</span><span class="token punctuation">,</span> <span class="token string">'Thursday'</span><span class="token punctuation">,</span> <span class="token string">'Friday'</span><span class="token punctuation">)</span>week <span class="token operator">=</span> week<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">'Wednesday'</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">+</span> week<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>week<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')</span></code></pre><p>【例子】元组有不可更改 (immutable) 的性质，因此不能直接给元组的元素赋值，但是只要元组中的元素可更改 (mutable)，那么我们可以直接更改其元素，注意这跟赋值其元素不同。</p><pre class=" language-python"><code class="language-python">t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># (1, 2, 3, [4, 5, 6])</span>t1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># (1, 2, 3, [9, 5, 6])</span></code></pre><h3 id="4-元组相关的操作符"><a href="#4-元组相关的操作符" class="headerlink" title="4. 元组相关的操作符"></a>4. 元组相关的操作符</h3><ul><li>等号操作符：<code>==</code></li><li>连接操作符 <code>+</code></li><li>重复操作符 <code>*</code></li><li>成员关系操作符 <code>in</code>、<code>not in</code></li></ul><p>「等号 ==」，只有成员、成员位置都相同时才返回True。</p><p>元组拼接有两种方式，用「加号 +」和「乘号 *」，前者首尾拼接，后者复制拼接。</p><p>【例子】</p><pre class=" language-python"><code class="language-python">t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span>t3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t1 <span class="token operator">==</span> t2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span>t1 <span class="token operator">==</span> t3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span>t4 <span class="token operator">=</span> t1 <span class="token operator">+</span> t2<span class="token keyword">print</span><span class="token punctuation">(</span>t4<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># (123, 456, 456, 123)</span>t5 <span class="token operator">=</span> t3 <span class="token operator">*</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>t5<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># (123, 456, 123, 456, 123, 456)</span>t3 <span class="token operator">*=</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># (123, 456, 123, 456, 123, 456)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token keyword">in</span> t3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">456</span> <span class="token operator">not</span> <span class="token keyword">in</span> t3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span></code></pre><h3 id="5-内置方法"><a href="#5-内置方法" class="headerlink" title="5. 内置方法"></a>5. 内置方法</h3><p>元组大小和内容都不可更改，因此只有 <code>count</code> 和 <code>index</code> 两种方法。</p><p>【例子】</p><pre class=" language-python"><code class="language-python">t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10.31</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'python'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">10.31</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span></code></pre><ul><li><code>count(&#39;python&#39;)</code> 是记录在元组 <code>t</code> 中该元素出现几次，显然是 1 次</li><li><code>index(10.31)</code> 是找到该元素在元组 <code>t</code> 的索引，显然是 1</li></ul><h3 id="6-解压元组"><a href="#6-解压元组" class="headerlink" title="6. 解压元组"></a>6. 解压元组</h3><p>【例子】解压（unpack）一维元组（有几个元素左边括号定义几个变量）</p><pre class=" language-python"><code class="language-python">t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10.31</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">=</span> t<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1 10.31 python</span></code></pre><p>【例子】解压二维元组（按照元组里的元组结构来定义变量）</p><pre class=" language-python"><code class="language-python">t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10.31</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> t<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1 10.31 OK python</span></code></pre><p>【例子】如果你只想要元组其中几个元素，用通配符「*」，英文叫 wildcard，在计算机语言中代表一个或多个元素。下例就是把多个元素丢给了 <code>rest</code> 变量。</p><pre class=" language-python"><code class="language-python">t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">*</span>rest<span class="token punctuation">,</span> c <span class="token operator">=</span> t<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1 2 5</span><span class="token keyword">print</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [3, 4]</span></code></pre><p>【例子】如果你根本不在乎 rest 变量，那么就用通配符「*」加上下划线「_」。</p><pre class=" language-python"><code class="language-python">t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">*</span>_ <span class="token operator">=</span> t<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1 2</span></code></pre><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="1-字符串的定义"><a href="#1-字符串的定义" class="headerlink" title="1. 字符串的定义"></a>1. 字符串的定义</h3><ul><li>Python 中字符串被定义为引号之间的字符集合。</li><li>Python 支持使用成对的 单引号 或 双引号。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">t1 <span class="token operator">=</span> <span class="token string">'i love Python!'</span><span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> type<span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># i love Python! &lt;class 'str'></span>t2 <span class="token operator">=</span> <span class="token string">"I love Python!"</span><span class="token keyword">print</span><span class="token punctuation">(</span>t2<span class="token punctuation">,</span> type<span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># I love Python! &lt;class 'str'></span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 13</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'5'</span> <span class="token operator">+</span> <span class="token string">'8'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 58</span></code></pre><ul><li>Python 的常用转义字符</li></ul><table><thead><tr><th align="center">转义字符</th><th>描述</th></tr></thead><tbody><tr><td align="center"><code>\\</code></td><td>反斜杠符号</td></tr><tr><td align="center"><code>\&#39;</code></td><td>单引号</td></tr><tr><td align="center"><code>\&quot;</code></td><td>双引号</td></tr><tr><td align="center"><code>\n</code></td><td>换行</td></tr><tr><td align="center"><code>\t</code></td><td>横向制表符(TAB)</td></tr><tr><td align="center"><code>\r</code></td><td>回车</td></tr></tbody></table><p>【例子】如果字符串中需要出现单引号或双引号，可以使用转义符号<code>\</code>对字符串中的符号进行转义。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'let\'s go'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># let's go</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"let's go"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># let's go</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'C:\\now'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># C:\now</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"C:\\Program Files\\Intel\\Wifi\\Help"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># C:\Program Files\Intel\Wifi\Help</span></code></pre><p>【例子】原始字符串只需要在字符串前边加一个英文字母 r 即可。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token string">'C:\Program Files\Intel\Wifi\Help'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># C:\Program Files\Intel\Wifi\Help</span></code></pre><p>【例子】三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。</p><pre class=" language-python"><code class="language-python">para_str <span class="token operator">=</span> <span class="token triple-quoted-string string">"""这是一个多行字符串的实例多行字符串可以使用制表符TAB ( \t )。也可以使用换行符 [ \n ]。"""</span><span class="token keyword">print</span><span class="token punctuation">(</span>para_str<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这是一个多行字符串的实例</span><span class="token comment" spellcheck="true"># 多行字符串可以使用制表符</span><span class="token comment" spellcheck="true"># TAB (    )。</span><span class="token comment" spellcheck="true"># 也可以使用换行符 [</span><span class="token comment" spellcheck="true">#  ]。</span></code></pre><h3 id="2-字符串的切片与拼接"><a href="#2-字符串的切片与拼接" class="headerlink" title="2. 字符串的切片与拼接"></a>2. 字符串的切片与拼接</h3><ul><li>类似于元组具有不可修改性</li><li>从 0 开始 (和 Java 一样)</li><li>切片通常写成 <code>start:end</code> 这种形式，包括「<code>start</code> 索引」对应的元素，不包括「<code>end</code>索引」对应的元素。</li><li>索引值可正可负，正索引从 0 开始，从左往右；负索引从 -1 开始，从右往左。使用负数索引时，会从最后一个元素开始计数。最后一个元素的位置编号是 -1。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'I Love LsgoGroup'</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># I Love</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># e</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" 插入的字符串 "</span> <span class="token operator">+</span> str1<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># I Love 插入的字符串  LsgoGroup</span>s <span class="token operator">=</span> <span class="token string">'Python'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Python</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># th</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># yth</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># t</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># n</span></code></pre><h3 id="3-字符串的常用内置方法"><a href="#3-字符串的常用内置方法" class="headerlink" title="3. 字符串的常用内置方法"></a>3. 字符串的常用内置方法</h3><ul><li><code>capitalize()</code> 将字符串的第一个字符转换为大写。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">str2 <span class="token operator">=</span> <span class="token string">'xiaoxie'</span><span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Xiaoxie</span></code></pre><ul><li><code>lower()</code> 转换字符串中所有大写字符为小写。</li><li><code>upper()</code> 转换字符串中的小写字母为大写。</li><li><code>swapcase()</code> 将字符串中大写转换为小写，小写转换为大写。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">str2 <span class="token operator">=</span> <span class="token string">"DAXIExiaoxie"</span><span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># daxiexiaoxie</span><span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># DAXIEXIAOXIE</span><span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>swapcase<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># daxieXIAOXIE</span></code></pre><ul><li><code>count(str, beg= 0,end=len(string))</code> 返回<code>str</code>在 string 里面出现的次数，如果<code>beg</code>或者<code>end</code>指定则返回指定范围内<code>str</code>出现的次数。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">str2 <span class="token operator">=</span> <span class="token string">"DAXIExiaoxie"</span><span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'xi'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2</span></code></pre><ul><li><code>endswith(suffix, beg=0, end=len(string))</code> 检查字符串是否以指定子字符串 <code>suffix</code> 结束，如果是，返回 True，否则返回 False。如果 <code>beg</code> 和 <code>end</code> 指定值，则在指定范围内检查。</li><li><code>startswith(substr, beg=0,end=len(string))</code> 检查字符串是否以指定子字符串 <code>substr</code> 开头，如果是，返回 True，否则返回 False。如果 <code>beg</code> 和 <code>end</code> 指定值，则在指定范围内检查。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">str2 <span class="token operator">=</span> <span class="token string">"DAXIExiaoxie"</span><span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'ie'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'xi'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'Da'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'DA'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span></code></pre><ul><li><code>find(str, beg=0, end=len(string))</code> 检测 <code>str</code> 是否包含在字符串中，如果指定范围 <code>beg</code> 和 <code>end</code>，则检查是否包含在指定范围内，如果包含，返回开始的索引值，否则返回 -1。</li><li><code>rfind(str, beg=0,end=len(string))</code> 类似于 <code>find()</code> 函数，不过是从右边开始查找。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">str2 <span class="token operator">=</span> <span class="token string">"DAXIExiaoxie"</span><span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'xi'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 5</span><span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'ix'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># -1</span><span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'xi'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 9</span></code></pre><ul><li><code>isnumeric()</code> 如果字符串中只包含数字字符，则返回 True，否则返回 False。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">str3 <span class="token operator">=</span> <span class="token string">'12345'</span><span class="token keyword">print</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span>isnumeric<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span>str3 <span class="token operator">+=</span> <span class="token string">'a'</span><span class="token keyword">print</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span>isnumeric<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span></code></pre><ul><li><code>ljust(width[, fillchar])</code>返回一个原字符串左对齐，并使用<code>fillchar</code>（默认空格）填充至长度<code>width</code>的新字符串。</li><li><code>rjust(width[, fillchar])</code>返回一个原字符串右对齐，并使用<code>fillchar</code>（默认空格）填充至长度<code>width</code>的新字符串。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">str4 <span class="token operator">=</span> <span class="token string">'1101'</span><span class="token keyword">print</span><span class="token punctuation">(</span>str4<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 11010000</span><span class="token keyword">print</span><span class="token punctuation">(</span>str4<span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 00001101</span></code></pre><ul><li><code>lstrip([chars])</code> 截掉字符串左边的空格或指定字符。</li><li><code>rstrip([chars])</code> 删除字符串末尾的空格或指定字符。</li><li><code>strip([chars])</code> 在字符串上执行<code>lstrip()</code>和<code>rstrip()</code>。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">str5 <span class="token operator">=</span> <span class="token string">' I Love LsgoGroup '</span><span class="token keyword">print</span><span class="token punctuation">(</span>str5<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 'I Love LsgoGroup '</span><span class="token keyword">print</span><span class="token punctuation">(</span>str5<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'I'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ' Love LsgoGroup '</span><span class="token keyword">print</span><span class="token punctuation">(</span>str5<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ' I Love LsgoGroup'</span><span class="token keyword">print</span><span class="token punctuation">(</span>str5<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 'I Love LsgoGroup'</span><span class="token keyword">print</span><span class="token punctuation">(</span>str5<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 'I Love LsgoGrou'</span></code></pre><ul><li><code>partition(sub)</code> 找到子字符串sub，把字符串分为一个三元组<code>(pre_sub,sub,fol_sub)</code>，如果字符串中不包含sub则返回<code>(&#39;原字符串&#39;,&#39;&#39;,&#39;&#39;)</code>。</li><li><code>rpartition(sub)</code>类似于<code>partition()</code>方法，不过是从右边开始查找。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">str5 <span class="token operator">=</span> <span class="token string">' I Love LsgoGroup '</span><span class="token keyword">print</span><span class="token punctuation">(</span>str5<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>partition<span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ('I L', 'o', 've LsgoGroup')</span><span class="token keyword">print</span><span class="token punctuation">(</span>str5<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>partition<span class="token punctuation">(</span><span class="token string">'m'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ('I Love LsgoGroup', '', '')</span><span class="token keyword">print</span><span class="token punctuation">(</span>str5<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rpartition<span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ('I Love LsgoGr', 'o', 'up')</span></code></pre><ul><li><code>replace(old, new [, max])</code> 把 将字符串中的<code>old</code>替换成<code>new</code>，如果<code>max</code>指定，则替换不超过<code>max</code>次。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">str5 <span class="token operator">=</span> <span class="token string">' I Love LsgoGroup '</span><span class="token keyword">print</span><span class="token punctuation">(</span>str5<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token string">'We'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># We Love LsgoGroup</span></code></pre><ul><li><code>split(str=&quot;&quot;, num)</code> 不带参数默认是以空格为分隔符切片字符串，如果<code>num</code>参数有设置，则仅分隔<code>num</code>个子字符串，返回切片后的子字符串拼接的列表。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">str5 <span class="token operator">=</span> <span class="token string">' I Love LsgoGroup '</span><span class="token keyword">print</span><span class="token punctuation">(</span>str5<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['I', 'Love', 'LsgoGroup']</span><span class="token keyword">print</span><span class="token punctuation">(</span>str5<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['I L', 've Lsg', 'Gr', 'up']</span></code></pre><p>【例子】</p><pre class=" language-python"><code class="language-python">u <span class="token operator">=</span> <span class="token string">"www.baidu.com.cn"</span><span class="token comment" spellcheck="true"># 使用默认分隔符</span><span class="token keyword">print</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['www.baidu.com.cn']</span><span class="token comment" spellcheck="true"># 以"."为分隔符</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['www', 'baidu', 'com', 'cn']</span><span class="token comment" spellcheck="true"># 分割0次</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['www.baidu.com.cn']</span><span class="token comment" spellcheck="true"># 分割一次</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['www', 'baidu.com.cn']</span><span class="token comment" spellcheck="true"># 分割两次</span><span class="token keyword">print</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['www', 'baidu', 'com.cn']</span><span class="token comment" spellcheck="true"># 分割两次，并取序列为1的项</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># baidu</span><span class="token comment" spellcheck="true"># 分割两次，并把分割后的三个部分保存到三个变量</span>u1<span class="token punctuation">,</span> u2<span class="token punctuation">,</span> u3 <span class="token operator">=</span> u<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>u1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># www</span><span class="token keyword">print</span><span class="token punctuation">(</span>u2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># baidu</span><span class="token keyword">print</span><span class="token punctuation">(</span>u3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># com.cn</span></code></pre><p>【例子】去掉换行符</p><pre class=" language-python"><code class="language-python">c <span class="token operator">=</span> <span class="token triple-quoted-string string">'''sayhellobaby'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># say</span><span class="token comment" spellcheck="true"># hello</span><span class="token comment" spellcheck="true"># baby</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['say', 'hello', 'baby']</span></code></pre><p>【例子】</p><pre class=" language-python"><code class="language-python">string <span class="token operator">=</span> <span class="token string">"hello boy&lt;[www.baidu.com]>byebye"</span><span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># www.baidu.com</span><span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['www', 'baidu', 'com']</span></code></pre><ul><li><code>splitlines([keepends])</code> 按照行(‘\r’, ‘\r\n’, \n’)分隔，返回一个包含各行作为元素的列表，如果参数<code>keepends</code>为 False，不包含换行符，如果为 True，则保留换行符。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">str6 <span class="token operator">=</span> <span class="token string">'I \n Love \n LsgoGroup'</span><span class="token keyword">print</span><span class="token punctuation">(</span>str6<span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['I ', ' Love ', ' LsgoGroup']</span><span class="token keyword">print</span><span class="token punctuation">(</span>str6<span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['I \n', ' Love \n', ' LsgoGroup']</span></code></pre><ul><li><code>maketrans(intab, outtab)</code> 创建字符映射的转换表，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</li><li><code>translate(table, deletechars=&quot;&quot;)</code> 根据参数<code>table</code>给出的表，转换字符串的字符，要过滤掉的字符放到<code>deletechars</code>参数中。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">str7 <span class="token operator">=</span> <span class="token string">'this is string example....wow!!!'</span>intab <span class="token operator">=</span> <span class="token string">'aeiou'</span>outtab <span class="token operator">=</span> <span class="token string">'12345'</span>trantab <span class="token operator">=</span> str7<span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>intab<span class="token punctuation">,</span> outtab<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>trantab<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;97: 49, 111: 52, 117: 53, 101: 50, 105: 51&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>str7<span class="token punctuation">.</span>translate<span class="token punctuation">(</span>trantab<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># th3s 3s str3ng 2x1mpl2....w4w!!!</span></code></pre><h3 id="4-字符串格式化"><a href="#4-字符串格式化" class="headerlink" title="4. 字符串格式化"></a>4. 字符串格式化</h3><ul><li><code>format</code> 格式化函数</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">str8 <span class="token operator">=</span> <span class="token string">"&amp;#123;0&amp;#125; Love &amp;#123;1&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token string">'Lsgogroup'</span><span class="token punctuation">)</span>  # 位置参数<span class="token keyword">print</span><span class="token punctuation">(</span>str8<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># I Love Lsgogroup</span>str8 <span class="token operator">=</span> <span class="token string">"&amp;#123;a&amp;#125; Love &amp;#123;b&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token string">'I'</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token string">'Lsgogroup'</span><span class="token punctuation">)</span>  # 关键字参数<span class="token keyword">print</span><span class="token punctuation">(</span>str8<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># I Love Lsgogroup</span>str8 <span class="token operator">=</span> <span class="token string">"&amp;#123;0&amp;#125; Love &amp;#123;b&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'I'</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token string">'Lsgogroup'</span><span class="token punctuation">)</span>  # 位置参数要在关键字参数之前<span class="token keyword">print</span><span class="token punctuation">(</span>str8<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># I Love Lsgogroup</span>str8 <span class="token operator">=</span> <span class="token string">'&amp;#123;0:.2f&amp;#125;&amp;#123;1&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">27.658</span><span class="token punctuation">,</span> <span class="token string">'GB'</span><span class="token punctuation">)</span>  # 保留小数点后两位<span class="token keyword">print</span><span class="token punctuation">(</span>str8<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 27.66GB</span></code></pre><ul><li>Python 字符串格式化符号</li></ul><table><thead><tr><th align="center">符   号</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">%c</td><td align="left">格式化字符及其ASCII码</td></tr><tr><td align="center">%s</td><td align="left">格式化字符串，用str()方法处理对象</td></tr><tr><td align="center">%r</td><td align="left">格式化字符串，用rper()方法处理对象</td></tr><tr><td align="center">%d</td><td align="left">格式化整数</td></tr><tr><td align="center">%o</td><td align="left">格式化无符号八进制数</td></tr><tr><td align="center">%x</td><td align="left">格式化无符号十六进制数</td></tr><tr><td align="center">%X</td><td align="left">格式化无符号十六进制数（大写）</td></tr><tr><td align="center">%f</td><td align="left">格式化浮点数字，可指定小数点后的精度</td></tr><tr><td align="center">%e</td><td align="left">用科学计数法格式化浮点数</td></tr><tr><td align="center">%E</td><td align="left">作用同%e，用科学计数法格式化浮点数</td></tr><tr><td align="center">%g</td><td align="left">根据值的大小决定使用%f或%e</td></tr><tr><td align="center">%G</td><td align="left">作用同%g，根据值的大小决定使用%f或%E</td></tr></tbody></table><p>【例子】</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%c'</span> <span class="token operator">%</span> <span class="token number">97</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># a</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%c %c %c'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># a b c</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%d + %d = %d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 4 + 5 = 9</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我叫 %s 今年 %d 岁!"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 我叫 小明 今年 10 岁!</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%o'</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 12</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%x'</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># a</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%X'</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># A</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%f'</span> <span class="token operator">%</span> <span class="token number">27.658</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 27.658000</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%e'</span> <span class="token operator">%</span> <span class="token number">27.658</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2.765800e+01</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%E'</span> <span class="token operator">%</span> <span class="token number">27.658</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2.765800E+01</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%g'</span> <span class="token operator">%</span> <span class="token number">27.658</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 27.658</span>text <span class="token operator">=</span> <span class="token string">"I am %d years old."</span> <span class="token operator">%</span> <span class="token number">22</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I said: %s."</span> <span class="token operator">%</span> text<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># I said: I am 22 years old..</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I said: %r."</span> <span class="token operator">%</span> text<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># I said: 'I am 22 years old.'</span></code></pre><ul><li>格式化操作符辅助指令</li></ul><table><thead><tr><th align="center">符号</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center"><code>m.n</code></td><td align="left">m 是显示的最小总宽度,n 是小数点后的位数（如果可用的话）</td></tr><tr><td align="center"><code>-</code></td><td align="left">用作左对齐</td></tr><tr><td align="center"><code>+</code></td><td align="left">在正数前面显示加号( + )</td></tr><tr><td align="center"><code>#</code></td><td align="left">在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)</td></tr><tr><td align="center"><code>0</code></td><td align="left">显示的数字前面填充’0’而不是默认的空格</td></tr></tbody></table><p>【例子】</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%5.1f'</span> <span class="token operator">%</span> <span class="token number">27.658</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ' 27.7'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%.2e'</span> <span class="token operator">%</span> <span class="token number">27.658</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2.77e+01</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%10d'</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># '        10'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%-10d'</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># '10        '</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%+d'</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># +10</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%#o'</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>  # <span class="token number">0o12</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%#x'</span> <span class="token operator">%</span> <span class="token number">108</span><span class="token punctuation">)</span>  # <span class="token number">0x6c</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%010d'</span> <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0000000005</span></code></pre><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><h3 id="1-可变类型与不可变类型"><a href="#1-可变类型与不可变类型" class="headerlink" title="1. 可变类型与不可变类型"></a>1. 可变类型与不可变类型</h3><ul><li>序列是以连续的整数为索引，与此不同的是，字典以”关键字”为索引，关键字可以是任意不可变类型，通常用字符串或数值。</li><li>字典是 Python 唯一的一个 <u>映射类型</u>，字符串、元组、列表属于<u>序列类型</u>。</li></ul><p>那么如何快速判断一个数据类型 <code>X</code> 是不是可变类型的呢？两种方法：</p><ul><li>麻烦方法：用 <code>id(X)</code> 函数，对 X 进行某种操作，比较操作前后的 <code>id</code>，如果不一样，则 <code>X</code> 不可变，如果一样，则 <code>X</code> 可变。</li><li>便捷方法：用 <code>hash(X)</code>，只要不报错，证明 <code>X</code> 可被哈希，即不可变，反过来不可被哈希，即可变。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 140732167000896</span>i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 140732167000960</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 4300825160</span>l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 4300825160</span></code></pre><ul><li>整数 <code>i</code> 在加 1 之后的 <code>id</code> 和之前不一样，因此加完之后的这个 <code>i</code> (虽然名字没变)，但不是加之前的那个 <code>i</code> 了，因此整数是不可变类型。</li><li>列表 <code>l</code> 在附加 <code>&#39;Python&#39;</code> 之后的 <code>id</code> 和之前一样，因此列表是可变类型。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>hash<span class="token punctuation">(</span><span class="token string">'Name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 7047218704141848153</span><span class="token keyword">print</span><span class="token punctuation">(</span>hash<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Python'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1704535747474881831</span><span class="token keyword">print</span><span class="token punctuation">(</span>hash<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Python'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># TypeError: unhashable type: 'list'</span></code></pre><pre><code>print(hash(&#123;1, 2, 3&#125;))# TypeError: unhashable type: &#39;set&#39;</code></pre><ul><li>数值、字符和元组 都能被哈希，因此它们是不可变类型。</li><li>列表、集合、字典不能被哈希，因此它是可变类型。</li></ul><h3 id="2-字典的定义"><a href="#2-字典的定义" class="headerlink" title="2. 字典的定义"></a>2. 字典的定义</h3><p>字典 是无序的 键:值（<code>key:value</code>）对集合，键必须是互不相同的（在同一个字典之内）。</p><ul><li><code>dict</code> 内部存放的顺序和 <code>key</code> 放入的顺序是没有关系的。</li><li><code>dict</code> 查找和插入的速度极快，不会随着 <code>key</code> 的增加而增加，但是需要占用大量的内存。</li></ul><p>字典 定义语法为 <code>&#123;元素1, 元素2, ..., 元素n&#125;</code></p><ul><li>其中每一个元素是一个「键值对」– 键:值 (<code>key:value</code>)</li><li>关键点是「大括号 {}」,「逗号 ,」和「冒号 :」</li><li>大括号 – 把所有元素绑在一起</li><li>逗号 – 将每个键值对分开</li><li>冒号 – 将键和值分开</li></ul><h3 id="3-创建和访问字典"><a href="#3-创建和访问字典" class="headerlink" title="3. 创建和访问字典"></a>3. 创建和访问字典</h3><p>【例子】</p><pre class=" language-python"><code class="language-python">brand <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'李宁'</span><span class="token punctuation">,</span> <span class="token string">'耐克'</span><span class="token punctuation">,</span> <span class="token string">'阿迪达斯'</span><span class="token punctuation">]</span>slogan <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'一切皆有可能'</span><span class="token punctuation">,</span> <span class="token string">'Just do it'</span><span class="token punctuation">,</span> <span class="token string">'Impossible is nothing'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'耐克的口号是:'</span><span class="token punctuation">,</span> slogan<span class="token punctuation">[</span>brand<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'耐克'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 耐克的口号是: Just do it</span>dic <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'李宁': '一切皆有可能', '耐克': 'Just do it', '阿迪达斯': 'Impossible is nothing'&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'耐克的口号是:'</span><span class="token punctuation">,</span> dic<span class="token punctuation">[</span><span class="token string">'耐克'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 耐克的口号是: Just do it</span></code></pre><p>【例子】通过字符串或数值作为<code>key</code>来创建字典。</p><pre class=" language-python"><code class="language-python">dic1 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;1: 'one', 2: 'two', 3: 'three'&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;1: 'one', 2: 'two', 3: 'three'&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># one</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># KeyError: 4</span></code></pre><pre class=" language-python"><code class="language-python">dic2 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'rice': 35, 'wheat': 101, 'corn': 67&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'wheat': 101, 'corn': 67, 'rice': 35&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic2<span class="token punctuation">[</span><span class="token string">'rice'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 35</span></code></pre><p>注意：如果我们取的键在字典中不存在，会直接报错<code>KeyError</code>。</p><p>【例子】通过元组作为<code>key</code>来创建字典，但一般不这样使用。</p><pre class=" language-python"><code class="language-python">dic <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;(1, 2, 3): "Tom", "Age": 12, 3: [3, 5, 7]&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;(1, 2, 3): 'Tom', 'Age': 12, 3: [3, 5, 7]&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'dict'></span></code></pre><p>通过构造函数<code>dict</code>来创建字典。</p><ul><li><code>dict()</code> 创建一个空的字典。</li></ul><p>【例子】通过<code>key</code>直接把数据放入字典中，但一个<code>key</code>只能对应一个<code>value</code>，多次对一个<code>key</code>放入 <code>value</code>，后面的值会把前面的值冲掉。</p><pre class=" language-python"><code class="language-python">dic <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>dic<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>dic<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>dic<span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &amp;#123;'a': 1, 'b': 2, 'c': 3&amp;#125;</span>dic<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &amp;#123;'a': 11, 'b': 2, 'c': 3&amp;#125;</span>dic<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &amp;#123;'a': 11, 'b': 2, 'c': 3, 'd': 4&amp;#125;</span></code></pre><ul><li><code>dict(mapping)</code> new dictionary initialized from a mapping object’s (key, value) pairs</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">dic1 <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token number">4139</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'peach'</span><span class="token punctuation">,</span> <span class="token number">4127</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'cherry'</span><span class="token punctuation">,</span> <span class="token number">4098</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'cherry': 4098, 'apple': 4139, 'peach': 4127&amp;#125;</span>dic2 <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token number">4139</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'peach'</span><span class="token punctuation">,</span> <span class="token number">4127</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'cherry'</span><span class="token punctuation">,</span> <span class="token number">4098</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'peach': 4127, 'cherry': 4098, 'apple': 4139&amp;#125;</span></code></pre><ul><li><code>dict(**kwargs)</code> -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</li></ul><p>【例子】这种情况下，键只能为字符串类型，并且创建的时候字符串不能加引号，加上就会直接报语法错误。</p><pre class=" language-python"><code class="language-python">dic <span class="token operator">=</span> dict<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'name': 'Tom', 'age': 10&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'dict'></span></code></pre><h3 id="4-字典的内置方法"><a href="#4-字典的内置方法" class="headerlink" title="4. 字典的内置方法"></a>4. 字典的内置方法</h3><ul><li><code>dict.fromkeys(seq[, value])</code> 用于创建一个新字典，以序列 <code>seq</code> 中元素做字典的键，<code>value</code> 为字典所有键对应的初始值。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">seq <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">)</span>dic1 <span class="token operator">=</span> dict<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &amp;#123;'name': None, 'age': None, 'sex': None&amp;#125;</span>dic2 <span class="token operator">=</span> dict<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span>seq<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &amp;#123;'name': 10, 'age': 10, 'sex': 10&amp;#125;</span>dic3 <span class="token operator">=</span> dict<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span>seq<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'小马'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic3<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &amp;#123;'name': ('小马', '8', '男'), 'age': ('小马', '8', '男'), 'sex': ('小马', '8', '男')&amp;#125;</span></code></pre><ul><li><code>dict.keys()</code>返回一个可迭代对象，可以使用 <code>list()</code> 来转换为列表，列表为字典中的所有键。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">dic <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'Name': 'lsgogroup', 'Age': 7&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># dict_keys(['Name', 'Age'])</span>lst <span class="token operator">=</span> list<span class="token punctuation">(</span>dic<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 转换为列表</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['Name', 'Age']</span></code></pre><ul><li><code>dict.values()</code>返回一个迭代器，可以使用 <code>list()</code> 来转换为列表，列表为字典中的所有值。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">dic <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'Sex': 'female', 'Age': 7, 'Name': 'Zara'&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># dict_values(['female', 7, 'Zara'])</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>dic<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [7, 'female', 'Zara']</span></code></pre><ul><li><code>dict.items()</code>以列表返回可遍历的 (键, 值) 元组数组。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">dic <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'Name': 'Lsgogroup', 'Age': 7&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># dict_items([('Name', 'Lsgogroup'), ('Age', 7)])</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple<span class="token punctuation">(</span>dic<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># (('Name', 'Lsgogroup'), ('Age', 7))</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>dic<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [('Name', 'Lsgogroup'), ('Age', 7)]</span></code></pre><ul><li><code>dict.get(key, default=None)</code> 返回指定键的值，如果值不在字典中返回默认值。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">dic <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'Name': 'Lsgogroup', 'Age': 27&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Age 值为 : %s"</span> <span class="token operator">%</span> dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Age'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Age 值为 : 27</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Sex 值为 : %s"</span> <span class="token operator">%</span> dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Sex'</span><span class="token punctuation">,</span> <span class="token string">"NA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Sex 值为 : NA</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'Name': 'Lsgogroup', 'Age': 27&amp;#125;</span></code></pre><ul><li><code>dict.setdefault(key, default=None)</code>和<code>get()</code>方法 类似, 如果键不存在于字典中，将会添加键并将值设为默认值。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">dic <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'Name': 'Lsgogroup', 'Age': 7&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Age 键的值为 : %s"</span> <span class="token operator">%</span> dic<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'Age'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Age 键的值为 : 7</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Sex 键的值为 : %s"</span> <span class="token operator">%</span> dic<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'Sex'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Sex 键的值为 : None</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'Age': 7, 'Name': 'Lsgogroup', 'Sex': None&amp;#125;</span></code></pre><ul><li><code>key in dict</code> <code>in</code> 操作符用于判断键是否存在于字典中，如果键在字典 dict 里返回<code>true</code>，否则返回<code>false</code>。而<code>not in</code>操作符刚好相反，如果键在字典 dict 里返回<code>false</code>，否则返回<code>true</code>。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">dic <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'Name': 'Lsgogroup', 'Age': 7&amp;#125;</span><span class="token comment" spellcheck="true"># in 检测键 Age 是否存在</span><span class="token keyword">if</span> <span class="token string">'Age'</span> <span class="token keyword">in</span> dic<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"键 Age 存在"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"键 Age 不存在"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 检测键 Sex 是否存在</span><span class="token keyword">if</span> <span class="token string">'Sex'</span> <span class="token keyword">in</span> dic<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"键 Sex 存在"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"键 Sex 不存在"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># not in 检测键 Age 是否存在</span><span class="token keyword">if</span> <span class="token string">'Age'</span> <span class="token operator">not</span> <span class="token keyword">in</span> dic<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"键 Age 不存在"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"键 Age 存在"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 键 Age 存在</span><span class="token comment" spellcheck="true"># 键 Sex 不存在</span><span class="token comment" spellcheck="true"># 键 Age 存在</span></code></pre><ul><li><code>dict.pop(key[,default])</code>删除字典给定键 <code>key</code> 所对应的值，返回值为被删除的值。<code>key</code> 值必须给出。若<code>key</code>不存在，则返回 <code>default</code> 值。</li><li><code>del dict[key]</code> 删除字典给定键 <code>key</code> 所对应的值。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">dic1 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;1: "a", 2: [1, 2]&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dic1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># a &amp;#123;2: [1, 2]&amp;#125;</span><span class="token comment" spellcheck="true"># 设置默认值，必须添加，否则报错</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"nokey"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dic1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># nokey &amp;#123;2: [1, 2]&amp;#125;</span><span class="token keyword">del</span> dic1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;&amp;#125;</span></code></pre><ul><li><code>dict.popitem()</code>随机返回并删除字典中的一对键和值，如果字典已经为空，却调用了此方法，就报出KeyError异常。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">dic1 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;1: "a", 2: [1, 2]&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic1<span class="token punctuation">.</span>popitem<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;2: [1, 2]&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># (1, 'a')</span></code></pre><ul><li><code>dict.clear()</code>用于删除字典内所有元素。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">dic <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'Name': 'Zara', 'Age': 7&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"字典长度 : %d"</span> <span class="token operator">%</span> len<span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 字典长度 : 2</span>dic<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"字典删除后长度 : %d"</span> <span class="token operator">%</span> len<span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 字典删除后长度 : 0</span></code></pre><ul><li><code>dict.copy()</code>返回一个字典的浅复制。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">dic1 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'Name': 'Lsgogroup', 'Age': 7, 'Class': 'First'&amp;#125;</span>dic2 <span class="token operator">=</span> dic1<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"dic2"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'Age': 7, 'Name': 'Lsgogroup', 'Class': 'First'&amp;#125;</span></code></pre><p>【例子】直接赋值和 copy 的区别</p><pre class=" language-python"><code class="language-python">dic1 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'user': 'lsgogroup', 'num': [1, 2, 3]&amp;#125;</span><span class="token comment" spellcheck="true"># 引用对象</span>dic2 <span class="token operator">=</span> dic1  <span class="token comment" spellcheck="true"># 浅拷贝父对象（一级目录），子对象（二级目录）不拷贝，还是引用</span>dic3 <span class="token operator">=</span> dic1<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>dic1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 148635574728</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>dic2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 148635574728</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>dic3<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 148635574344</span><span class="token comment" spellcheck="true"># 修改 data 数据</span>dic1<span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'root'</span>dic1<span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出结果</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'user': 'root', 'num': [2, 3]&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'user': 'root', 'num': [2, 3]&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'user': 'runoob', 'num': [2, 3]&amp;#125;</span></code></pre><ul><li><code>dict.update(dict2)</code>把字典参数 <code>dict2</code> 的 <code>key:value</code>对 更新到字典 <code>dict</code> 里。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">dic <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'Name': 'Lsgogroup', 'Age': 7&amp;#125;</span>dic2 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'Sex': 'female', 'Age': 8&amp;#125;</span>dic<span class="token punctuation">.</span>update<span class="token punctuation">(</span>dic2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'Sex': 'female', 'Age': 8, 'Name': 'Lsgogroup'&amp;#125;</span></code></pre><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>Python 中<code>set</code>与<code>dict</code>类似，也是一组<code>key</code>的集合，但不存储<code>value</code>。由于<code>key</code>不能重复，所以，在<code>set</code>中，没有重复的<code>key</code>。</p><p>注意，<code>key</code>为不可变类型，即可哈希的值。</p><p>【例子】</p><pre class=" language-python"><code class="language-python">num <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'dict'></span>num <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;1, 2, 3, 4&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'set'></span></code></pre><h3 id="1-集合的创建"><a href="#1-集合的创建" class="headerlink" title="1. 集合的创建"></a>1. 集合的创建</h3><ul><li>先创建对象再加入元素。</li><li>在创建空集合的时候只能使用<code>s = set()</code>，因为<code>s = &#123;&#125;</code>创建的是空字典。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">basket <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>basket<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'apple'</span><span class="token punctuation">)</span>basket<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'banana'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>basket<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'banana', 'apple'&amp;#125;</span></code></pre><ul><li>直接把一堆元素用花括号括起来<code>&#123;元素1, 元素2, ..., 元素n&#125;</code>。</li><li>重复元素在<code>set</code>中会被自动被过滤。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">basket <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'apple', 'orange', 'apple', 'pear', 'orange', 'banana'&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>basket<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'banana', 'apple', 'pear', 'orange'&amp;#125;</span></code></pre><ul><li>使用<code>set(value)</code>工厂函数，把列表或元组转换成集合。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'abracadabra'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'r', 'b', 'd', 'c', 'a'&amp;#125;</span>b <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Lsgogroup"</span><span class="token punctuation">,</span> <span class="token string">"Taobao"</span><span class="token punctuation">,</span> <span class="token string">"Taobao"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'Taobao', 'Lsgogroup', 'Google'&amp;#125;</span>c <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Lsgogroup"</span><span class="token punctuation">,</span> <span class="token string">"Taobao"</span><span class="token punctuation">,</span> <span class="token string">"Google"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'Taobao', 'Lsgogroup', 'Google'&amp;#125;</span></code></pre><p>【例子】去掉列表中重复的元素</p><pre class=" language-python"><code class="language-python">lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> item <span class="token keyword">in</span> lst<span class="token punctuation">:</span>    <span class="token keyword">if</span> item <span class="token operator">not</span> <span class="token keyword">in</span> temp<span class="token punctuation">:</span>        temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [0, 1, 2, 3, 4, 5]</span>a <span class="token operator">=</span> set<span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [0, 1, 2, 3, 4, 5]</span></code></pre><p>从结果发现集合的两个特点：无序 (unordered) 和唯一 (unique)。</p><p>由于 <code>set</code> 存储的是无序集合，所以我们不可以为集合创建索引或执行切片(slice)操作，也没有键(keys)可用来获取集合中元素的值，但是可以判断一个元素是否在集合中。</p><h3 id="2-访问集合中的值"><a href="#2-访问集合中的值" class="headerlink" title="2. 访问集合中的值"></a>2. 访问集合中的值</h3><ul><li>可以使用<code>len()</code>內建函数得到集合的大小。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Baidu'</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 3</span></code></pre><ul><li>可以使用<code>for</code>把集合中的数据一个个读取出来。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Baidu'</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> s<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Baidu</span><span class="token comment" spellcheck="true"># Google</span><span class="token comment" spellcheck="true"># Taobao</span></code></pre><ul><li>可以通过<code>in</code>或<code>not in</code>判断一个元素是否在集合中已经存在</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Baidu'</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Taobao'</span> <span class="token keyword">in</span> s<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Facebook'</span> <span class="token operator">not</span> <span class="token keyword">in</span> s<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span></code></pre><h3 id="3-集合的内置方法"><a href="#3-集合的内置方法" class="headerlink" title="3. 集合的内置方法"></a>3. 集合的内置方法</h3><ul><li><code>set.add(elmnt)</code>用于给集合添加元素，如果添加的元素在集合中已存在，则不执行任何操作。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">fruits <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"apple", "banana", "cherry"&amp;#125;</span>fruits<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">"orange"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'orange', 'cherry', 'banana', 'apple'&amp;#125;</span>fruits<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'orange', 'cherry', 'banana', 'apple'&amp;#125;</span></code></pre><ul><li><code>set.update(set)</code>用于修改当前集合，可以添加新的元素或集合到当前集合中，如果添加的元素在集合中已存在，则该元素只会出现一次，重复的会忽略。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"apple", "banana", "cherry"&amp;#125;</span>y <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"google", "baidu", "apple"&amp;#125;</span>x<span class="token punctuation">.</span>update<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &amp;#123;'cherry', 'banana', 'apple', 'google', 'baidu'&amp;#125;</span>y<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"lsgo"</span><span class="token punctuation">,</span> <span class="token string">"dreamtech"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &amp;#123;'lsgo', 'baidu', 'dreamtech', 'apple', 'google'&amp;#125;</span></code></pre><ul><li><code>set.remove(item)</code> 用于移除集合中的指定元素。如果元素不存在，则会发生错误。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">fruits <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"apple", "banana", "cherry"&amp;#125;</span>fruits<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'apple', 'cherry'&amp;#125;</span></code></pre><ul><li><code>set.discard(value)</code> 用于移除指定的集合元素。<code>remove()</code> 方法在移除一个不存在的元素时会发生错误，而 <code>discard()</code> 方法不会。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">fruits <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"apple", "banana", "cherry"&amp;#125;</span>fruits<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'apple', 'cherry'&amp;#125;</span></code></pre><ul><li><code>set.pop()</code> 用于随机移除一个元素。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">fruits <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"apple", "banana", "cherry"&amp;#125;</span>x <span class="token operator">=</span> fruits<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'cherry', 'apple'&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># banana</span></code></pre><p>由于 set 是无序和无重复元素的集合，所以两个或多个 set 可以做数学意义上的集合操作。</p><ul><li><code>set.intersection(set1, set2)</code> 返回两个集合的交集。</li><li><code>set1 &amp; set2</code> 返回两个集合的交集。</li><li><code>set.intersection_update(set1, set2)</code> 交集，在原始的集合上移除不重叠的元素。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'abracadabra'</span><span class="token punctuation">)</span>b <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'alacazam'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'r', 'a', 'c', 'b', 'd'&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'c', 'a', 'l', 'm', 'z'&amp;#125;</span>c <span class="token operator">=</span> a<span class="token punctuation">.</span>intersection<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'a', 'c'&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'c', 'a'&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'a', 'r', 'c', 'b', 'd'&amp;#125;</span>a<span class="token punctuation">.</span>intersection_update<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'a', 'c'&amp;#125;</span></code></pre><ul><li><code>set.union(set1, set2)</code> 返回两个集合的并集。</li><li><code>set1 | set2</code> 返回两个集合的并集。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'abracadabra'</span><span class="token punctuation">)</span>b <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'alacazam'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'r', 'a', 'c', 'b', 'd'&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'c', 'a', 'l', 'm', 'z'&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">|</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'l', 'd', 'm', 'b', 'a', 'r', 'z', 'c'&amp;#125;</span>c <span class="token operator">=</span> a<span class="token punctuation">.</span>union<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'c', 'a', 'd', 'm', 'r', 'b', 'z', 'l'&amp;#125;</span></code></pre><ul><li><code>set.difference(set)</code> 返回集合的差集。</li><li><code>set1 - set2</code> 返回集合的差集。</li><li><code>set.difference_update(set)</code> 集合的差集，直接在原来的集合中移除元素，没有返回值。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'abracadabra'</span><span class="token punctuation">)</span>b <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'alacazam'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'r', 'a', 'c', 'b', 'd'&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'c', 'a', 'l', 'm', 'z'&amp;#125;</span>c <span class="token operator">=</span> a<span class="token punctuation">.</span>difference<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'b', 'd', 'r'&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'d', 'b', 'r'&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'r', 'd', 'c', 'a', 'b'&amp;#125;</span>a<span class="token punctuation">.</span>difference_update<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'d', 'r', 'b'&amp;#125;</span></code></pre><ul><li><code>set.symmetric_difference(set)</code>返回集合的异或。</li><li><code>set1 ^ set2</code> 返回集合的异或。</li><li><code>set.symmetric_difference_update(set)</code>移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'abracadabra'</span><span class="token punctuation">)</span>b <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'alacazam'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'r', 'a', 'c', 'b', 'd'&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'c', 'a', 'l', 'm', 'z'&amp;#125;</span>c <span class="token operator">=</span> a<span class="token punctuation">.</span>symmetric_difference<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'m', 'r', 'l', 'b', 'z', 'd'&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">^</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'m', 'r', 'l', 'b', 'z', 'd'&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'r', 'd', 'c', 'a', 'b'&amp;#125;</span>a<span class="token punctuation">.</span>symmetric_difference_update<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'r', 'b', 'm', 'l', 'z', 'd'&amp;#125;</span></code></pre><ul><li><code>set.issubset(set)</code>判断集合是不是被其他集合包含，如果是则返回 True，否则返回 False。</li><li><code>set1 &lt;= set2</code> 判断集合是不是被其他集合包含，如果是则返回 True，否则返回 False。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"a", "b", "c"&amp;#125;</span>y <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"f", "e", "d", "c", "b", "a"&amp;#125;</span>z <span class="token operator">=</span> x<span class="token punctuation">.</span>issubset<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> y<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span>x <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"a", "b", "c"&amp;#125;</span>y <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"f", "e", "d", "c", "b"&amp;#125;</span>z <span class="token operator">=</span> x<span class="token punctuation">.</span>issubset<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> y<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span></code></pre><ul><li><code>set.issuperset(set)</code>用于判断集合是不是包含其他集合，如果是则返回 True，否则返回 False。</li><li><code>set1 &gt;= set2</code> 判断集合是不是包含其他集合，如果是则返回 True，否则返回 False。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"f", "e", "d", "c", "b", "a"&amp;#125;</span>y <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"a", "b", "c"&amp;#125;</span>z <span class="token operator">=</span> x<span class="token punctuation">.</span>issuperset<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">>=</span> y<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span>x <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"f", "e", "d", "c", "b"&amp;#125;</span>y <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"a", "b", "c"&amp;#125;</span>z <span class="token operator">=</span> x<span class="token punctuation">.</span>issuperset<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">>=</span> y<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span></code></pre><ul><li><code>set.isdisjoint(set)</code> 用于判断两个集合是不是不相交，如果是返回 True，否则返回 False。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"f", "e", "d", "c", "b"&amp;#125;</span>y <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"a", "b", "c"&amp;#125;</span>z <span class="token operator">=</span> x<span class="token punctuation">.</span>isdisjoint<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span>x <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"f", "e", "d", "m", "g"&amp;#125;</span>y <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"a", "b", "c"&amp;#125;</span>z <span class="token operator">=</span> x<span class="token punctuation">.</span>isdisjoint<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span></code></pre><h3 id="4-集合的转换"><a href="#4-集合的转换" class="headerlink" title="4. 集合的转换"></a>4. 集合的转换</h3><p>【例子】</p><pre class=" language-python"><code class="language-python">se <span class="token operator">=</span> set<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>li <span class="token operator">=</span> list<span class="token punctuation">(</span>se<span class="token punctuation">)</span>tu <span class="token operator">=</span> tuple<span class="token punctuation">(</span>se<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>se<span class="token punctuation">,</span> type<span class="token punctuation">(</span>se<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;0, 1, 2, 3&amp;#125; &lt;class 'set'></span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span> type<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [0, 1, 2, 3] &lt;class 'list'></span><span class="token keyword">print</span><span class="token punctuation">(</span>tu<span class="token punctuation">,</span> type<span class="token punctuation">(</span>tu<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># (0, 1, 2, 3) &lt;class 'tuple'></span></code></pre><h3 id="5-不可变集合"><a href="#5-不可变集合" class="headerlink" title="5. 不可变集合"></a>5. 不可变集合</h3><p>Python 提供了不能改变元素的集合的实现版本，即不能增加或删除元素，类型名叫<code>frozenset</code>。需要注意的是<code>frozenset</code>仍然可以进行集合操作，只是不能用带有<code>update</code>的方法。</p><ul><li><code>frozenset([iterable])</code> 返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> frozenset<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 生成一个新的不可变集合</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># frozenset(&amp;#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&amp;#125;)</span>b <span class="token operator">=</span> frozenset<span class="token punctuation">(</span><span class="token string">'lsgogroup'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># frozenset(&amp;#123;'g', 's', 'p', 'r', 'u', 'o', 'l'&amp;#125;)</span></code></pre><h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><p>在 Python 中，序列类型包括字符串、列表、元组、集合和字典，这些序列支持一些通用的操作，但比较特殊的是，集合和字典不支持索引、切片、相加和相乘操作。</p><h3 id="1-针对序列的内置函数"><a href="#1-针对序列的内置函数" class="headerlink" title="1. 针对序列的内置函数"></a>1. 针对序列的内置函数</h3><ul><li><code>list(sub)</code> 把一个可迭代对象转换为列表。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># []</span>b <span class="token operator">=</span> <span class="token string">'I Love LsgoGroup'</span>b <span class="token operator">=</span> list<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['I', ' ', 'L', 'o', 'v', 'e', ' ', 'L', 's', 'g', 'o', 'G', 'r', 'o', 'u', 'p']</span>c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>c <span class="token operator">=</span> list<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [1, 1, 2, 3, 5, 8]</span></code></pre><ul><li><code>tuple(sub)</code> 把一个可迭代对象转换为元组。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> tuple<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ()</span>b <span class="token operator">=</span> <span class="token string">'I Love LsgoGroup'</span>b <span class="token operator">=</span> tuple<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ('I', ' ', 'L', 'o', 'v', 'e', ' ', 'L', 's', 'g', 'o', 'G', 'r', 'o', 'u', 'p')</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>c <span class="token operator">=</span> tuple<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># (1, 1, 2, 3, 5, 8)</span></code></pre><ul><li><code>str(obj)</code> 把obj对象转换为字符串</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">123</span>a <span class="token operator">=</span> str<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 123</span></code></pre><ul><li><code>len(s)</code> 返回对象（字符、列表、元组等）长度或元素个数。<ul><li><code>s</code> – 对象。</li></ul></li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span>b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'L'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'v'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'L'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 16</span>c <span class="token operator">=</span> <span class="token string">'I Love LsgoGroup'</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 16</span></code></pre><ul><li><code>max(sub)</code>返回序列或者参数集合中的最大值</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>max<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 5</span><span class="token keyword">print</span><span class="token punctuation">(</span>max<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 99</span><span class="token keyword">print</span><span class="token punctuation">(</span>max<span class="token punctuation">(</span><span class="token string">'IloveLsgoGroup'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># v</span></code></pre><ul><li><code>min(sub)</code>返回序列或参数集合中的最小值</li></ul><p>【例子】</p><pre class=" language-py"><code class="language-py">print(min(1, 2, 3, 4, 5))  # 1print(min([-8, 99, 3, 7, 83]))  # -8print(min('IloveLsgoGroup'))  # G</code></pre><ul><li><code>sum(iterable[, start=0])</code> 返回序列<code>iterable</code>与可选参数<code>start</code>的总和。</li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 25</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 35</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 25</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 45</span></code></pre><ul><li><code>sorted(iterable, key=None, reverse=False) </code> 对所有可迭代的对象进行排序操作。<ul><li><code>iterable</code> – 可迭代对象。</li><li><code>key</code> – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</li><li><code>reverse</code> – 排序规则，<code>reverse = True</code> 降序 ， <code>reverse = False</code> 升序（默认）。</li><li>返回重新排序的列表。</li></ul></li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>sorted<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [-8, 3, 7, 83, 99]</span><span class="token keyword">print</span><span class="token punctuation">(</span>sorted<span class="token punctuation">(</span>x<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [99, 83, 7, 3, -8]</span>t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"age": 20, "name": "a"&amp;#125;, &amp;#123;"age": 25, "name": "b"&amp;#125;, &amp;#123;"age": 10, "name": "c"&amp;#125;)</span>x <span class="token operator">=</span> sorted<span class="token punctuation">(</span>t<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> a<span class="token punctuation">:</span> a<span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [&amp;#123;'age': 10, 'name': 'c'&amp;#125;, &amp;#123;'age': 20, 'name': 'a'&amp;#125;, &amp;#123;'age': 25, 'name': 'b'&amp;#125;]</span></code></pre><ul><li><code>reversed(seq)</code> 函数返回一个反转的迭代器。<ul><li><code>seq</code> – 要转换的序列，可以是 tuple, string, list 或 range。</li></ul></li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'lsgogroup'</span>x <span class="token operator">=</span> reversed<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'reversed'></span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;reversed object at 0x000002507E8EC2C8></span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['p', 'u', 'o', 'r', 'g', 'o', 'g', 's', 'l']</span>t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>reversed<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['p', 'u', 'o', 'r', 'g', 'o', 'g', 's', 'l']</span>r <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>reversed<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [8, 7, 6, 5]</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>reversed<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [83, 7, 3, 99, -8]</span></code></pre><ul><li><code>enumerate(sequence, [start=0])</code></li></ul><p>【例子】用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</p><pre class=" language-python"><code class="language-python">seasons <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Spring'</span><span class="token punctuation">,</span> <span class="token string">'Summer'</span><span class="token punctuation">,</span> <span class="token string">'Fall'</span><span class="token punctuation">,</span> <span class="token string">'Winter'</span><span class="token punctuation">]</span>a <span class="token operator">=</span> list<span class="token punctuation">(</span>enumerate<span class="token punctuation">(</span>seasons<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]</span>b <span class="token operator">=</span> list<span class="token punctuation">(</span>enumerate<span class="token punctuation">(</span>seasons<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> element <span class="token keyword">in</span> a<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&amp;#123;0&amp;#125;,&amp;#123;1&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 0,Spring</span><span class="token comment" spellcheck="true"># 1,Summer</span><span class="token comment" spellcheck="true"># 2,Fall</span><span class="token comment" spellcheck="true"># 3,Winter</span></code></pre><ul><li><code>zip(iter1 [,iter2 [...]])</code><ul><li>用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，这样做的好处是节约了不少的内存。</li><li>我们可以使用 <code>list()</code> 转换来输出列表。</li><li>如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 <code>*</code> 号操作符，可以将元组解压为列表。</li></ul></li></ul><p>【例子】</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>zipped <span class="token operator">=</span> zip<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>zipped<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;zip object at 0x000000C5D89EDD88></span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>zipped<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [(1, 4), (2, 5), (3, 6)]</span>zipped <span class="token operator">=</span> zip<span class="token punctuation">(</span>a<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>zipped<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [(1, 4), (2, 5), (3, 6)]</span>a1<span class="token punctuation">,</span> a2 <span class="token operator">=</span> zip<span class="token punctuation">(</span><span class="token operator">*</span>zip<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [1, 2, 3]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [4, 5, 6]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
